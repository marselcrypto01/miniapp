// app/HomeClient.tsx
'use client';

import React, { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/navigation';
import PresenceClient from '@/components/PresenceClient';
import {
  listLessons,
  getRandomDailyQuote,
  getUserProgress,
  saveUserProgress,
  initSupabaseFromTelegram,
} from '@/lib/db';
import { waitForTelegramUser, getDisplayName, readTelegramUserNow } from '@/lib/telegram';

type Progress = { lesson_id: number; status: 'completed' | 'pending' };
type Lesson   = { id: number; title: string; subtitle?: string | null };
type AchievementKey = 'first' | 'unlock' | 'fear' | 'errors' | 'arbitrager';
type Env = 'loading' | 'telegram' | 'browser';

const CORE_LESSONS_COUNT = 5;
const POINTS_PER_LESSON = 100;

/** —à–∏—Ä–∏–Ω–∞ = –º–∏–Ω–∏-–±–∞—Ä—É —á–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é */
const WRAP = 'mx-auto max-w-[var(--content-max)] px-4';

const ICONS: Record<number, string> = { 1: 'üß†', 2: 'üéØ', 3: 'üõ°Ô∏è', 4: '‚ö†Ô∏è', 5: 'üß≠', 6: 'üìö' };

const QUOTES = [
  '–£—á–∏—Å—å –≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≤–∏–¥—è—Ç —à—É–º.',
  '–£—Å–ø–µ—Ö –ª—é–±–∏—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.',
  '–õ—É—á—à–∏–π —Ä–∏—Å–∫ ‚Äî —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—á–∏—Ç–∞–Ω.',
  '–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π. –®–∞–≥ –∑–∞ —à–∞–≥–æ–º.',
  '–ú–∞–ª—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–∏–ª—å–Ω–µ–µ –±–æ–ª—å—à–∏—Ö —Ä—ã–≤–∫–æ–≤ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü.',
];

/* —É—Ä–æ–≤–Ω–∏ */
type LevelKey = 'novice' | 'megagood' | 'almostpro' | 'arbitrager' | 'cryptoboss';
const LEVELS: Record<LevelKey, { title: string; threshold: number; icon: string }> = {
  novice:      { title: '–ù–æ–≤–∏—á–æ–∫',      threshold: 0,   icon: 'üå±' },
  megagood:    { title: '–ú–µ–≥–∞—Ö–æ—Ä–æ—à',    threshold: 40,  icon: 'üí™' },
  almostpro:   { title: '–ü–æ—á—Ç–∏–ü—Ä–æ—Ñ–∏',   threshold: 80,  icon: '‚ö°' },
  arbitrager:  { title: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫',  threshold: 120, icon: 'üéØ' },
  cryptoboss:  { title: '–ö—Ä–∏–ø—Ç–æ-–±–æ—Å—Å',  threshold: 160, icon: 'üëë' },
};

function computeXP(completedCount: number, ach: Record<AchievementKey, boolean>) {
  let xp = completedCount * 20;
  if (ach.first) xp += 5;
  if (ach.unlock) xp += 5;
  if (ach.fear) xp += 5;
  if (ach.errors) xp += 10;
  if (ach.arbitrager) xp += 25;
  return xp;
}
function computeLevel(xp: number): { key: LevelKey; nextAt: number | null; progressPct: number } {
  const order: LevelKey[] = ['novice', 'megagood', 'almostpro', 'arbitrager', 'cryptoboss'];
  let current: LevelKey = 'novice';
  for (const k of order) if (xp >= LEVELS[k].threshold) current = k;
  const idx = order.indexOf(current);
  const next = order[idx + 1];
  if (!next) return { key: current, nextAt: null, progressPct: 100 };
  const from = LEVELS[current].threshold;
  const to   = LEVELS[next].threshold;
  const pct  = Math.max(0, Math.min(100, Math.round(((xp - from) / (to - from)) * 100)));
  return { key: current, nextAt: to, progressPct: pct };
}

/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ NEW: user-scoped localStorage ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */
function getTgIdSync(): string | null {
  try {
    const wa = (window as any)?.Telegram?.WebApp;
    const id = wa?.initDataUnsafe?.user?.id;
    return (id ?? null)?.toString?.() ?? null;
  } catch { return null; }
}
function ns(key: string): string {
  const id = getTgIdSync();
  return id ? `${key}:tg_${id}` : `${key}:anon`;
}

export default function HomeClient() {
  const router = useRouter();

  const [firstName, setFirstName] = useState<string>('');
  const [env, setEnv] = useState<Env>('loading');

  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [progress, setProgress] = useState<Progress[]>([]);
  const [quote, setQuote] = useState<string>('');

  const [achievements, setAchievements] = useState<Record<AchievementKey, boolean>>({
    first: false, unlock: false, fear: false, errors: false, arbitrager: false
  });
  const [allCompleted, setAllCompleted] = useState(false);
  const [progressLoaded, setProgressLoaded] = useState(false);
  const [learningNow, setLearningNow] = useState<number>(() => {
    const min = 50, max = 253;
    const seed = Date.now();
    const x = Math.abs(Math.sin(seed)) * (max - min) + min;
    return Math.floor(x);
  });

  // ‚úÖ –¥–æ–±–∞–≤–∏–ª —Ñ–ª–∞–≥ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ auth, —á—Ç–æ–±—ã —Å–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç—å JWT, –∞ –ø–æ—Ç–æ–º —á–∏—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å
  const [authReady, setAuthReady] = useState(false);

  /* –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase (tg-auth) –∏ —Å—Ç—Ä–∞—Ö–æ–≤–æ—á–Ω—ã–π —Ä–µ–¥–∏—Ä–µ–∫—Ç –≤ /admin */
  useEffect(() => {
    let stop = false;

    (async () => {
      try {
        await initSupabaseFromTelegram();
      } catch (e) {
        console.warn('auth init failed', e);
      } finally {
        if (!stop) setAuthReady(true);
      }
    })();

    function wantAdmin() {
      const sp = new URLSearchParams(window.location.search);
      const s1 = (sp.get('startapp') || '').toLowerCase();
      const s2 = (sp.get('tgWebAppStartParam') || '').toLowerCase();
      let s3 = '';
      if (location.hash.startsWith('#')) {
        try { s3 = new URLSearchParams(location.hash.slice(1)).get('tgWebAppStartParam') || ''; } catch {}
      }
      return s1 === 'admin' || s2 === 'admin' || s3.toLowerCase() === 'admin';
    }

    (async () => {
      for (let i = 0; i < 80 && !stop; i++) {
        try {
          // @ts-ignore
          const wa = (window as any)?.Telegram?.WebApp;
          const username  = wa?.initDataUnsafe?.user?.username?.toLowerCase?.();
          const startParm = (wa?.initDataUnsafe?.start_param || wa?.initDataUnsafe?.startapp)?.toLowerCase?.();
          const asked     = wantAdmin() || startParm === 'admin';
          if (username === 'marselv1' && asked) {
            window.location.replace('/admin');
            return;
          }
        } catch {}
        await new Promise(r => setTimeout(r, 100));
      }
    })();

    return () => { stop = true; };
  }, []);

  /* –≤—ã—á–∏—Å–ª–µ–Ω–∏—è */
  const isCompleted = (id: number) => progress.find(p => p.lesson_id === id)?.status === 'completed';
  const completedCount = useMemo(
    () => progress.filter(p => p.status === 'completed' && p.lesson_id <= CORE_LESSONS_COUNT).length,
    [progress]
  );
  const coursePct = Math.min(100, Math.round((completedCount / CORE_LESSONS_COUNT) * 100));
  const points    = completedCount * POINTS_PER_LESSON;

  const xp = computeXP(completedCount, achievements);
  const { key: levelKey, progressPct } = computeLevel(xp);
  const level = LEVELS[levelKey];

  const checkpoints = useMemo(
    () => Array.from({ length: CORE_LESSONS_COUNT }, (_, i) => (i + 1) * (100 / CORE_LESSONS_COUNT)),
    []
  );
  const coreLessons  = useMemo(() => lessons.filter(l => l.id <= CORE_LESSONS_COUNT), [lessons]);

  /* TG (–∏–º—è) ‚Äî —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –º–≥–Ω–æ–≤–µ–Ω–Ω–æ, –∑–∞—Ç–µ–º –∂–¥—ë–º –¥–æ 5 —Å–µ–∫ */
  useEffect(() => {
    // —Å–Ω–∞—á–∞–ª–∞ –ø–æ–¥–Ω–∏–º–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ –∏–º—è –∏–∑ user-scoped localStorage
    try {
      const savedName = localStorage.getItem(ns('display_name'));
      if (savedName) setFirstName(savedName);
    } catch {}

    let cancelled = false;
    const detect = async () => {
      let u = readTelegramUserNow();
      if (!u) u = await waitForTelegramUser(5000);
      if (cancelled) return;
      const wa = (window as any)?.Telegram?.WebApp;
      try { wa?.ready?.(); wa?.expand?.(); } catch {}
      if (u) {
        setEnv('telegram');
        const dn = getDisplayName(u) || '';
        setFirstName(dn);
        try {
          localStorage.setItem(ns('display_name'), dn);
          if (u.username) localStorage.setItem(ns('username'), String(u.username));
        } catch {}
      } else {
        setEnv('browser');
      }
    };
    void detect();
    return () => { cancelled = true; };
  }, []);

  // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π ¬´–°–µ–π—á–∞—Å —É—á–∞—Ç—Å—è N —á–µ–ª–æ–≤–µ–∫¬ª ‚Äî –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞—Ö–æ–¥–µ/–≤–æ–∑–≤—Ä–∞—Ç–µ
  useEffect(() => {
    const update = () => {
      const min = 50, max = 253;
      const seed = Date.now();
      const x = Math.abs(Math.sin(seed)) * (max - min) + min;
      setLearningNow(Math.floor(x));
    };
    update();
    window.addEventListener('focus', update);
    const onVis = () => document.visibilityState === 'visible' && update();
    document.addEventListener('visibilitychange', onVis);
    return () => { window.removeEventListener('focus', update); document.removeEventListener('visibilitychange', onVis); };
  }, []);

  /* —É—Ä–æ–∫–∏ */
  useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        const rows = await listLessons();
        if (cancelled) return;
        const mapped: Lesson[] = rows
          .sort((a: any, b: any) => (a.order_index ?? a.id) - (b.order_index ?? b.id))
          .map((r: any) => ({ id: r.id, title: r.title ?? '', subtitle: r.subtitle ?? undefined }));
        const names: Record<number, string> = {
          1: '–ö—Ä–∏–ø—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤: —á—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º —Ç–µ–±–µ',
          2: '–ê—Ä–±–∏—Ç—Ä–∞–∂: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ–±–º–µ–Ω–µ –∫—Ä–∏–ø—Ç—ã',
          3: '–†–∏—Å–∫–∏ –∏ —Å—Ç—Ä–∞—Ö–∏: –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ',
          4: '5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–±–∏–≤–∞—é—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫',
          5: '–§–∏–Ω–∞–ª: —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç—ã',
        };
        const patched = mapped.map(m => names[m.id] ? { ...m, title: names[m.id] } : m);
        setLessons(patched);
        try { localStorage.setItem('lessons_cache', JSON.stringify(patched)); } catch {}
      } catch {
        setLessons([
          { id: 1, title: '–ö—Ä–∏–ø—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤: —á—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º —Ç–µ–±–µ' },
          { id: 2, title: '–ê—Ä–±–∏—Ç—Ä–∞–∂: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ–±–º–µ–Ω–µ –∫—Ä–∏–ø—Ç—ã' },
          { id: 3, title: '–†–∏—Å–∫–∏ –∏ —Å—Ç—Ä–∞—Ö–∏: –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ' },
          { id: 4, title: '5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–±–∏–≤–∞—é—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫' },
          { id: 5, title: '–§–∏–Ω–∞–ª: —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç—ã' },
          { id: 6, title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', subtitle: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –±–∞–Ω–∫–æ–≤ –∏ –±–∏—Ä–∂' },
        ]);
      }
    })();
    return () => { cancelled = true; };
  }, []);

  /* —Ü–∏—Ç–∞—Ç–∞ */
  useEffect(() => {
    (async () => {
      try {
        const q = await getRandomDailyQuote();
        if (q) { setQuote(q); return; }
      } catch {}
      try {
        const saved = JSON.parse(localStorage.getItem('admin_quotes') || '[]');
        const pool: string[] = Array.isArray(saved) && saved.length ? saved : QUOTES;
        setQuote(pool[Math.floor(Math.random() * pool.length)]);
      } catch {
        setQuote(QUOTES[Math.floor(Math.random() * QUOTES.length)]);
      }
    })();
  }, []);

  /* –ø—Ä–æ–≥—Ä–µ—Å—Å (–∂–¥—ë–º authReady ‚Üí —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ë–î (RLS), –∏–Ω–∞—á–µ ‚Äî –∏–∑ user-scoped LS) */
  useEffect(() => {
    if (!authReady) return;
    (async () => {
      try {
        const rows = await getUserProgress();
        if (rows?.length) {
          const arr: Progress[] = rows.map((r: any) => ({
            lesson_id: Number(r.lesson_id),
            status: r.status === 'completed' ? 'completed' : 'pending',
          }));
          setProgress(arr);
          try { localStorage.setItem(ns('progress'), JSON.stringify(arr)); } catch {}
        } else {
          const raw = localStorage.getItem(ns('progress'));
          if (raw) setProgress(JSON.parse(raw) as Progress[]);
        }
      } catch {
        const raw = localStorage.getItem(ns('progress'));
        if (raw) setProgress(JSON.parse(raw) as Progress[]);
      }

      try {
        const ach = localStorage.getItem(ns('achievements'));
        const all = localStorage.getItem(ns('all_completed')) === 'true';
        if (ach) setAchievements(JSON.parse(ach));
        setAllCompleted(all);
      } catch {}

      setProgressLoaded(true);
    })();
  }, [authReady]);

  /* –∞–≤—Ç–æ-–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ */
  useEffect(() => {
    const refresh = () => {
      try {
        const raw = localStorage.getItem(ns('progress'));
        if (raw) setProgress(JSON.parse(raw));
      } catch {}
      try {
        const nm = localStorage.getItem(ns('display_name'));
        if (nm) setFirstName(nm || '');
      } catch {}
    };
    window.addEventListener('focus', refresh);
    const onVis = () => document.visibilityState === 'visible' && refresh();
    document.addEventListener('visibilitychange', onVis);
    return () => { window.removeEventListener('focus', refresh); document.removeEventListener('visibilitychange', onVis); };
  }, []);

  /* —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —Å—á–∏—Ç–∞–µ–º –∞—á–∏–≤–∫–∏ + –æ—á–∫–∏ (–≤ user-scoped LS) */
  useEffect(() => {
    if (!progressLoaded) return;
    const next = { ...achievements };
    const _isCompleted = (id: number) => progress.find(p => p.lesson_id === id)?.status === 'completed';
    if (_isCompleted(1)) next.first = true;
    if (_isCompleted(2)) next.unlock = true;
    if (_isCompleted(3)) next.fear = true;
    if (_isCompleted(4)) next.errors = true;
    const finishedCount = progress.filter(p => p.status === 'completed' && p.lesson_id <= CORE_LESSONS_COUNT).length;
    if (finishedCount === CORE_LESSONS_COUNT) next.arbitrager = true;

    setAchievements(next);
    try { localStorage.setItem(ns('achievements'), JSON.stringify(next)); } catch {}

    const finished = finishedCount === CORE_LESSONS_COUNT;
    setAllCompleted(finished);
    try { localStorage.setItem(ns('all_completed'), finished ? 'true' : 'false'); } catch {}

    try { localStorage.setItem(ns('progress'), JSON.stringify(progress)); } catch {}
    (async () => { try { await saveUserProgress(progress); } catch {} })();

    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—á–∫–∏ (–∫–∞–ø 500)
    const pts = Math.min(500, finishedCount * POINTS_PER_LESSON);
    try { localStorage.setItem(ns('points'), String(pts)); } catch {}
  }, [progress, progressLoaded]); // eslint-disable-line react-hooks/exhaustive-deps

  /* –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è ¬´—Ä–∞–º–∫–∞¬ª —É—Ä–æ–≤–Ω—è */
  const ChipRing: React.FC<{ pct: number; children: React.ReactNode }> = ({ pct, children }) => {
    const clamped = Math.max(0, Math.min(100, pct));
    return (
      <div
        className="rounded-full p-[1px] w-full"
        style={{
          border: '1px solid transparent',
          background: `
            linear-gradient(var(--surface), var(--surface)) padding-box,
            linear-gradient(to top, var(--brand) ${clamped}%, rgba(255,255,255,0.08) 0) border-box
          `,
          boxShadow: 'var(--shadow)',
        }}
      >
        <div
          className="flex items-center justify-center gap-1.5 px-3 py-1.5 rounded-full"
          style={{ background: 'color-mix(in oklab, var(--surface) 85%, transparent)' }}
        >
          {children}
        </div>
      </div>
    );
  };

  return (
    <main className={`${WRAP} py-4`}>
      <PresenceClient page="home" activity="–ì–ª–∞–≤–Ω–∞—è" progressPct={coursePct} />

      {/* –®–∞–ø–∫–∞ */}
      <header className="mb-5 w-full">
        <h1 className="text-2xl font-extrabold tracking-tight leading-[1.1]">–ö—É—Ä—Å –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ –∫—Ä–∏–ø—Ç–µ</h1>
        <div className="mt-2 h-[3px] w-24 rounded bg-[var(--brand)]" />

        <p className="mt-3 text-[13px] text-[var(--muted)]">–ü—Ä–∏–≤–µ—Ç{firstName ? `, ${firstName}` : ''}!</p>
        <div className="mt-2 chip px-3 py-1.5 w-fit">
          <span>üë•</span>
          <span className="text-xs">–°–µ–π—á–∞—Å —É—á–∞—Ç—Å—è {learningNow} —á–µ–ª–æ–≤–µ–∫</span>
        </div>

        <blockquote
          className="mt-2 rounded-xl border border-[var(--border)] p-3 text-[13px] italic text-[var(--muted)] w-full"
          style={{ boxShadow: 'var(--shadow)', borderLeftWidth: '4px', borderLeftColor: 'var(--brand)', background: 'color-mix(in oklab, var(--surface-2) 85%, transparent)' }}
        >
          <span className="mr-1">‚Äú</span>{quote}<span className="ml-1">‚Äù</span>
        </blockquote>

        {/* –æ—á–∫–∏ + —É—Ä–æ–≤–µ–Ω—å */}
        <div className="mt-3 grid grid-cols-2 gap-2 w-full">
          <div className="w-full">
            <div className="chip px-3 py-1.5 w-full justify-center text-xs">
              <span>üèÜ</span><span className="font-semibold">{Math.min(500, points)} –æ—á–∫.</span>
            </div>
          </div>
          <ChipRing pct={progressPct}>
            <span className="text-sm">{level.icon}</span>
            <span className="text-xs font-semibold">{level.title}</span>
          </ChipRing>
        </div>

        {/* –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
        <div className="mt-2 w-full">
          <div className="relative h-2 rounded-full bg-[var(--surface-2)] border border-[var(--border)] overflow-hidden w-full">
            <div className="absolute inset-y-0 left-0 bg-[var(--brand)]" style={{ width: `${coursePct}%` }} />
            {checkpoints.map((p, i) => (
              <div key={i} className="absolute top-1/2 -translate-y-1/2 w-2 h-2 rounded-full border border-[var(--border)]" style={{ left: `calc(${p}% - 4px)` }} />
            ))}
          </div>
          {/* –≤–µ—Ä–Ω—É–ª –ø—Ä–µ–∂–Ω–∏–π –º–µ–ª–∫–∏–π —à—Ä–∏—Ñ—Ç (11px) */}
          <div className="mt-1 flex items-center justify-between text-[11px] text-[var(--muted)]">
            <span>–ü—Ä–æ–π–¥–µ–Ω–æ: {Math.min(completedCount, CORE_LESSONS_COUNT)}/{CORE_LESSONS_COUNT}</span>
            <span>–û—Å—Ç–∞–ª–æ—Å—å: {Math.max(0, CORE_LESSONS_COUNT - completedCount)}</span>
          </div>
        </div>

        {/* –ê—á–∏–≤–∫–∏ */}
        <div className="mt-3 grid grid-cols-2 gap-2 w-full">
          {[
            { key: 'first' as const, icon: 'üë£', label: '–ü–µ—Ä–≤—ã–π —à–∞–≥' },
            { key: 'unlock' as const, icon: 'üîì', label: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–Ω–∞–Ω–∏—è' },
            { key: 'fear' as const, icon: 'üõ°Ô∏è', label: '–ü–æ–±–µ–¥–∏–ª —Å—Ç—Ä–∞—Ö–∏' },
            { key: 'errors' as const, icon: '‚úÖ', label: '–û—à–∏–±–∫–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã' },
            { key: 'arbitrager' as const, icon: 'üéØ', label: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫' },
          ].map(a => {
            const active = achievements[a.key];
            return (
              <div key={a.key} className="w-full">
                <div
                  className={`w-full px-3 rounded-full border flex items-center justify-center gap-1 h-9 ${active ? '' : 'opacity-55'}`}
                  style={{ borderColor: 'var(--border)', background: 'var(--surface-2)' }}
                >
                  <span className="text-sm shrink-0">{a.icon}</span>
                  <span
                    className="font-medium text-center leading-[1.1] break-words overflow-hidden
                               [font-size:clamp(12px,3.1vw,14px)]"
                    style={{ display:'-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient:'vertical' }}
                  >
                    {a.label}
                  </span>
                </div>
              </div>
            );
          })}
        </div>
      </header>

      {/* –£—Ä–æ–∫–∏ */}
      <section className="w-full">
        <h2 className="text-xl font-bold mb-2">–£—Ä–æ–∫–∏</h2>
        <div className="space-y-3 w-full">
          {coreLessons.map((l, idx) => {
            const done = isCompleted(l.id);
            const mins = ({1:7,2:9,3:8,4:6,5:10} as Record<number, number>)[l.id] ?? 6;
            return (
              <div key={l.id} className="w-full p-4 rounded-2xl bg-[var(--surface)] border border-[var(--border)] shadow-[0_1px_12px_rgba(0,0,0,.12)]">
                <div className="grid grid-cols-[48px_1fr] gap-3 w-full">
                  <div className="h-12 w-12 grid place-items-center rounded-xl bg-[var(--bg)] border border-[var(--border)] text-xl">{ICONS[l.id] ?? 'üìò'}</div>
                  <div className="min-w-0 w-full">
                    <div className="text-[17px] font-semibold leading-tight break-words">–£—Ä–æ–∫ {idx + 1}. {l.title}</div>
                    <div className="text-[13px] text-[var(--muted)] mt-1">{mins} –º–∏–Ω ‚Ä¢ –°—Ç–∞—Ç—É—Å: {done ? '–ø—Ä–æ–π–¥–µ–Ω' : '–Ω–µ –Ω–∞—á–∞—Ç'}</div>
                    <button
                      className="mt-3 w-full px-4 h-10 rounded-xl bg-[var(--brand)] text-black font-semibold active:translate-y-[1px]"
                      onClick={() => router.push(`/lesson/${l.id}`)}
                    >
                      –°–º–æ—Ç—Ä–µ—Ç—å
                    </button>
                  </div>
                </div>
              </div>
            );
          })}
        </div>

        {/* –ë–æ–Ω—É—Å */}
        <h3 className="text-lg font-semibold mt-6">–ë–æ–Ω—É—Å</h3>
        <p className="text-[12px] text-[var(--muted)] -mt-1 mb-3">–ë–æ–Ω—É—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞ (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –±–∞–Ω–∫–æ–≤, –±–∏—Ä–∂)</p>

        <div className="w-full p-4 rounded-2xl bg-[var(--surface)] border border-[var(--border)]">
          <div className="grid grid-cols-[48px_1fr] gap-3 w-full">
            <div className="h-12 w-12 grid place-items-center rounded-xl bg-[var(--bg)] border border-[var(--border)] text-xl">üìö</div>
            <div className="w-full">
              <div className="text-[17px] font-semibold leading-tight">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</div>
              <div className="text-[12px] text-[var(--muted)] mt-1">–°–µ–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –±–∞–Ω–∫–æ–≤ –∏ –±–∏—Ä–∂</div>
              <button
                className="mt-3 w-full px-4 h-10 rounded-xl bg-[var(--brand)] text-black font-semibold active:translate-y-[1px]"
                onClick={() => (allCompleted || points >= 500) && router.push('/lesson/6')}
                disabled={!(allCompleted || points >= 500)}
                title={(allCompleted || points >= 500) ? '–û—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å' : '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –∏–ª–∏ 500 –æ—á–∫–æ–≤'}
              >
                {(allCompleted || points >= 500) ? '–û—Ç–∫—Ä—ã—Ç—å' : '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞/500 –æ—á–∫–æ–≤'}
              </button>
            </div>
          </div>
        </div>
      </section>

      {/* FAQ ‚Äî –≤–µ—Ä–Ω—É–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é */}
      <section className="w-full mt-6">
        <h2 className="text-xl font-bold mb-3">üìå FAQ</h2>

        <div className="space-y-2">
          {[
            [
              '1. –ê –µ—Å–ª–∏ —É –º–µ–Ω—è –≤—Å–µ–≥–æ 10‚Äì20 —Ç—ã—Å—è—á ‚Äî —ç—Ç–æ –≤–æ–æ–±—â–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª?',
              'üëâ –î–∞. –î–∞–∂–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∏–Ω–∞—Ç—å –æ—Ç 20 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π ‚Äî —ç—Ç–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ –±—É–¥–µ—Ç –æ—â—É—Ç–∏–º—ã–π –¥–æ—Ö–æ–¥. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø–æ–Ω—è—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É, –∞ –¥–∞–ª—å—à–µ –≤—Å—ë –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è.',
            ],
            [
              '2. –ù–µ –ø–æ–∑–¥–Ω–æ –ª–∏ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫—Ä–∏–ø—Ç—É –≤ 2025 –≥–æ–¥—É?',
              'üëâ –ù–µ—Ç. –ö—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞—Å—Ç–∏, –º–∏–ª–ª–∏–æ–Ω—ã –ª—é–¥–µ–π –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –≥–æ–¥. –ê—Ä–±–∏—Ç—Ä–∞–∂ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ –µ—Å—Ç—å —Ä–∞–∑–Ω–∏—Ü–∞ –∫—É—Ä—Å–æ–≤ –∏ –ª—é–¥–∏ –º–µ–Ω—è—é—Ç –≤–∞–ª—é—Ç—É ‚Äî –∞ —ç—Ç–æ –≤—Å–µ–≥–¥–∞.',
            ],
            [
              '3. –ü—Ä–∞–≤–¥–∞, —á—Ç–æ –º–æ–∂–Ω–æ —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å –∏ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏?',
              'üëâ –£–π—Ç–∏ –≤ –º–∏–Ω—É—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –í—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –±–∏—Ä–∂–∏ —Å —ç—Å–∫—Ä–æ—É: –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –¥–µ—à–µ–≤–ª–µ –∏ –ø—Ä–æ–¥–∞—ë—Ç–µ –¥–æ—Ä–æ–∂–µ. –†–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –±–∞–Ω–∞–ª—å–Ω–æ–π –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∏—Ç—å—Å—è –≤ –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ. –ü–æ—ç—Ç–æ–º—É –ø—Ä–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫–æ–≤ –Ω–µ—Ç.',
            ],
            [
              '4. –°–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –º–µ—Å—è—Ü –Ω–æ–≤–∏—á–∫—É?',
              'üëâ –ù–æ–≤–∏—á–∫–∏ –æ–±—ã—á–Ω–æ –¥–µ–ª–∞—é—Ç 50‚Äì80 —Ç—ã—Å. —Ä—É–±–ª–µ–π –ø—Ä–∏ –∫–∞–ø–∏—Ç–∞–ª–µ 50‚Äì100 —Ç—ã—Å. —Ä—É–±–ª–µ–π. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 7% –∫ –∫–∞–ø–∏—Ç–∞–ª—É –≤ –¥–µ–Ω—å, –µ—Å–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç—å. –í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏.',
            ],
            [
              '5. –ß—Ç–æ –µ—Å–ª–∏ –±–∞–Ω–∫ –Ω–∞—á–Ω—ë—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã?',
              'üëâ –î–ª—è —ç—Ç–æ–≥–æ –µ—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ª–∏–º–∏—Ç—ã –ø–æ —Å—É–º–º–∞–º. –ë–∞–Ω–∫–∏ –Ω–µ –∑–∞–ø—Ä–µ—â–∞—é—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –≥–Ω–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω—ã —á–µ—Ä–µ–∑ –æ–¥–Ω—É –∫–∞—Ä—Ç—É. –°–æ–±–ª—é–¥–∞—è –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ–±–ª–µ–º –Ω–µ –±—É–¥–µ—Ç.',
            ],
            [
              '6. –Ø —Ä–∞–±–æ—Ç–∞—é/—É—á—É—Å—å. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂?',
              'üëâ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 1‚Äì2 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å. –≠—Ç–æ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Å–¥–µ–ª–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å. –ê—Ä–±–∏—Ç—Ä–∞–∂ –ª–µ–≥–∫–æ —Å–æ–≤–º–µ—â–∞—Ç—å —Å —Ä–∞–±–æ—Ç–æ–π –∏–ª–∏ —É—á—ë–±–æ–π.',
            ],
            [
              '7. –ê –≤–¥—Ä—É–≥ —è –Ω–µ —Ä–∞–∑–±–µ—Ä—É—Å—å? –≠—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ?',
              'üëâ –í—Å—ë –ø–æ–¥–∞—ë—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ. –ï—Å—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, —á–µ–∫-–ª–∏—Å—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –î–∞–∂–µ –ø–æ–ª–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫ –±—ã—Å—Ç—Ä–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è: —Å–Ω–∞—á–∞–ª–∞ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ–ø—Ä–∏–≤—ã—á–Ω–æ, –Ω–æ –ø–æ—Ç–æ–º –ø—Ä–æ—Ü–µ—Å—Å —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º –∏ –ø–æ–Ω—è—Ç–Ω—ã–º.',
            ],
            [
              '8. –ß–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ –ª—É—á—à–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –º–æ–Ω–µ—Ç—ã –∏–ª–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞?',
              'üëâ –í —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –¥–æ—Ö–æ–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–≥–∞–¥—ã–≤–∞–Ω–∏–π –∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã—Ö –∫–æ–ª–µ–±–∞–Ω–∏–π. –í –∞—Ä–±–∏—Ç—Ä–∞–∂–µ –¥–æ—Ö–æ–¥ —Å–∏—Å—Ç–µ–º–Ω—ã–π: –∫—É–ø–∏–ª –¥–µ—à–µ–≤–ª–µ ‚Äî –ø—Ä–æ–¥–∞–ª –¥–æ—Ä–æ–∂–µ. –¢—ã –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å —Å—Ä–∞–∑—É, –∞ –Ω–µ –∂–¥—ë—à—å –º–µ—Å—è—Ü–∞–º–∏.',
            ],
            [
              '9. –ù—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–ª–∏ –±–æ—è—Ç—å—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫?',
              'üëâ –ù–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–µ—Ç. –ú—ã –Ω–∏—á–µ–º –ø—Ä–æ—Ç–∏–≤–æ–∑–∞–∫–æ–Ω–Ω—ã–º –Ω–µ –∑–∞–Ω–∏–º–∞–µ–º—Å—è. –ù–∞ —Å—Ç–∞—Ä—Ç–µ —Å—É–º–º—ã –Ω–µ–±–æ–ª—å—à–∏–µ, –±–∞–Ω–∫–∏ –∫ –Ω–∏–º –Ω–µ –ø—Ä–∏–¥–∏—Ä–∞—é—Ç—Å—è.',
            ],
            [
              '10. –ê –µ—Å–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç—ã/–±–∞–Ω–∫–∞?',
              'üëâ –ï—Å—Ç—å –ø–æ–¥–±–æ—Ä–∫–∞ –ª—É—á—à–∏—Ö –±–∞–Ω–∫–æ–≤ –∏ –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å –µ—ë –≤ –±–æ–Ω—É—Å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞.',
            ],
            [
              '11. –ê –µ—Å–ª–∏ –∫—É—Ä—Å –∑–∞–∫—Ä–æ—é—Ç –∏–ª–∏ –∫—Ä–∏–ø—Ç—É –∑–∞–ø—Ä–µ—Ç—è—Ç?',
              'üëâ –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –æ–±–º–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –î–∞–∂–µ –µ—Å–ª–∏ –æ–¥–∏–Ω –±–∞–Ω–∫ —É–∂–µ—Å—Ç–æ—á–∏—Ç –ø—Ä–∞–≤–∏–ª–∞, –µ—Å—Ç—å –¥–µ—Å—è—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.',
            ],
            [
              '12. –ù—É–∂–Ω–æ –ª–∏ —Å–∏–¥–µ—Ç—å –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –≤–µ—Å—å –¥–µ–Ω—å?',
              'üëâ –ù–µ—Ç. –í—Å–µ —Å–¥–µ–ª–∫–∏ —É–¥–æ–±–Ω–æ –¥–µ–ª–∞—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –±—É–∫–≤–∞–ª—å–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤, –∏ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.',
            ],
          ].map(([q, a], i) => (
            <details key={i} className="glass rounded-2xl p-3 w-full">
              <summary className="cursor-pointer font-semibold">{q}</summary>
              <p className="mt-2 text-sm text-[var(--muted)]">{a}</p>
            </details>
          ))}
        </div>
      </section>

      <p className="mt-6 pb-24 text-center text-xs text-[var(--muted)]">@your_bot</p>
    </main>
  );
}


