'use client';

import React, { useEffect, useMemo, useState } from 'react';
import { createLead, initSupabaseFromTelegram } from '@/lib/db';

const WRAP = 'mx-auto max-w-[var(--content-max)] px-4';
type FormatKey = 'group' | 'pro';

const Chip: React.FC<{ children: React.ReactNode }> = ({ children }) => (
  <span
    className="inline-flex items-center h-7 px-2.5 rounded-full text-[12px] whitespace-nowrap
               bg-[color-mix(in_oklab,var(--surface-2)60%,transparent)]
               border border-[var(--border)]"
  >
    {children}
  </span>
);

/* user-scoped localStorage */
function getTgIdSync(): string | null {
  try {
    const wa = (window as any)?.Telegram?.WebApp;
    const id = wa?.initDataUnsafe?.user?.id;
    return (id ?? null)?.toString?.() ?? null;
  } catch { return null; }
}
function ns(key: string): string {
  const id = getTgIdSync();
  return id ? `${key}:tg_${id}` : `${key}:anon`;
}

export default function CoursesPage() {
  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
  useEffect(() => { initSupabaseFromTelegram().catch(() => {}); }, []);

  const [locked, setLocked] = useState(true);
  useEffect(() => {
    try { setLocked(!(localStorage.getItem(ns('all_completed')) === 'true')); } catch {}
  }, []);

  const [open, setOpen] = useState<{ [K in FormatKey]?: boolean }>({});
  const [formOpen, setFormOpen] = useState<null | FormatKey>(null);

  const tgUser = useMemo(() => {
    try {
      const wa = (window as any)?.Telegram?.WebApp;
      const u = wa?.initDataUnsafe?.user;
      if (!u) {
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        const isDev = process.env.NODE_ENV === 'development' || 
                     window.location.hostname === 'localhost' || 
                     window.location.hostname === '127.0.0.1' ||
                     window.location.hostname.includes('localhost');
        if (isDev) {
          return {
            name: '–î—Ä—É–≥',
            username: '@demo_user',
          };
        }
        return null;
      }
      return {
        name: [u.first_name, u.last_name].filter(Boolean).join(' ') || '',
        username: u.username ? `@${u.username}` : '',
      };
    } catch { return null; }
  }, []);

  const formats: Record<FormatKey, {
    title: string; emoji: string; teaser: string; chips: string[];
    bullets: string[]; audience: string; result: string; time: string;
    price: string; ctaNote?: string;
  }> = {
    group: {
      title: '–ì—Ä—É–ø–ø–æ–≤–æ–π –∫—É—Ä—Å: –ê—Ä–µ–Ω–¥–∞ –∑–∞ –ö—Ä–∏–ø—Ç—É',
      emoji: 'üßë‚Äçü§ù‚Äçüßë',
      teaser: '1 –Ω–µ–¥–µ–ª—è —ç—Ñ–∏—Ä–æ–≤ + –ø—Ä–∞–∫—Ç–∏–∫–∞. –†–µ–∑—É–ª—å—Ç–∞—Ç: –¥–æ—Ö–æ–¥ –æ—Ç ~70 000 ‚ÇΩ/–º–µ—Å –ø—Ä–∏ —Å—Ç–∞–±–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ.',
      chips: ['‚è± 1 –Ω–µ–¥–µ–ª—è', 'üßë‚Äçü§ù‚Äçüßë –ì—Ä—É–ø–ø–∞+—á–∞—Ç', 'ü§ù –ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3 –Ω–µ–¥.'],
      bullets: [
        '5 —ç—Ñ–∏—Ä–æ–≤ (–ø–Ω‚Äì–ø—Ç) + 2 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö –¥–Ω—è',
        '–¢–∞–±–ª–∏—Ü—ã —É—á—ë—Ç–∞ —Å–¥–µ–ª–æ–∫ –∏ –¥–æ—Ö–æ–¥–∞',
        '1 —Å–≤—è–∑–∫–∞ –±–µ–∑ –∫–∞—Ä—Ç –∏ 2 —Å–æ –∫–∞—Ä—Ç–∞–º–∏',
        '–ß–∞—Ç —Å —É—á–µ–Ω–∏–∫–∞–º–∏ –∏ –±–æ—Ç —Å –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏',
        '–ü–æ–¥–¥–µ—Ä–∂–∫–∞ 3 –Ω–µ–¥–µ–ª–∏',
      ],
      audience: '–ù–æ–≤–∏—á–∫–∞–º –¥–ª—è –ø–æ–Ω—è—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞ –∏ –¥–æ—Ö–æ–¥–∞.',
      result: '–ë–∞–∑–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂–∞, —Å—Ç–∞–±–∏–ª—å–Ω—ã–π –¥–æ—Ö–æ–¥, –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ.',
      time: '1‚Äì2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å, —Å—Ç–∞—Ä—Ç ‚Äî —Ä–∞–∑ –≤ –º–µ—Å—è—Ü',
      price: '50 000 ‚ÇΩ. –î–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞.',
    },
    pro: {
      title: '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ: –ö—Ä–∏–ø—Ç–æ–ú–∞—Ä—Å PRO',
      emoji: 'üíº',
      teaser: '–õ–∏—á–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ. –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç, –¥–æ—Ö–æ–¥ —Å–æ 2-–≥–æ –¥–Ω—è –∏ –±–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.',
      chips: ['üéØ 1:1 —Å–æ–∑–≤–æ–Ω—ã', 'üß© –õ–∏—á–Ω—ã–µ —Å–≤—è–∑–∫–∏', '‚ôæ –ü–æ–¥–¥–µ—Ä–∂–∫–∞'],
      bullets: [
        '–°—Ç—Ä–∞—Ç–µ–≥–∏—è –ø–æ–¥ —Ü–µ–ª–∏',
        '2 —Å–≤—è–∑–∫–∏ –±–µ–∑ –∫–∞—Ä—Ç –∏ 3 —Å –∫–∞—Ä—Ç–∞–º–∏',
        '–ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å–æ 2-–≥–æ –¥–Ω—è',
        '–¢–∞–±–ª–∏—Ü–∞ —É—á—ë—Ç–∞',
        '–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ',
        '–ë–µ—Å—Å—Ä–æ—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞',
        '–î–æ—Å—Ç—É–ø –≤ –∫–ª—É–±',
      ],
      audience: '–ù—É–∂–µ–Ω –±—ã—Å—Ç—Ä—ã–π –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä—É–µ–º—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç.',
      result: '–î–æ ~200 000 ‚ÇΩ/–º–µ—Å + –ø–ª–∞–Ω –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è.',
      time: '–ì—Ä–∞—Ñ–∏–∫ –ø–æ–¥ –≤–∞—Å, —Å—Ç–∞—Ä—Ç ‚Äî –ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏',
      price: '90 000 ‚ÇΩ. –î–æ—Å—Ç—É–ø–Ω–∞ —Ä–∞—Å—Å—Ä–æ—á–∫–∞ –°–±–µ—Ä–±–∞–Ω–∫–∞.',
    },
  };

  const openForm = (fmt: FormatKey) => setFormOpen(fmt);

  return (
    <main className={`${WRAP} py-4`}>
      <header className="mb-3 w-full">
        <h1 className="text-2xl font-extrabold tracking-tight leading-[1.1]">–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥</h1>
        <p className="mt-2 text-sm text-[var(--muted)]">
          –î–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ–±—É—á–µ–Ω–∏—è. –ö–æ—Ä–æ—Ç–∫–æ ‚Äî –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö, –¥–µ—Ç–∞–ª–∏ ‚Äî –ø–æ ¬´–ü–æ–¥—Ä–æ–±–Ω–µ–µ¬ª.
        </p>
      </header>

      <section className="w-full space-y-3">
        {(Object.keys(formats) as FormatKey[]).map((key) => {
          const f = formats[key];
          const expanded = !!open[key];

          return (
            <article
              key={key}
              className={`card w-full space-y-3 rounded-2xl ${expanded ? 'shadow-[0_12px_32px_rgba(0,0,0,.35)]' : ''}`}
            >
              <div className="grid grid-cols-[40px_1fr] gap-3">
                <div className="w-10 h-10 rounded-xl grid place-items-center bg-[var(--surface-2)] border border-[var(--border)] text-[18px] leading-none">
                  {f.emoji}
                </div>

                <div className="min-w-0">
                  <h3 className="text-[18px] font-semibold leading-tight">{f.title}</h3>
                  <p
                    className="mt-1 text-[14px] text-[var(--muted)] leading-snug overflow-hidden"
                    style={{ display: '-webkit-box', WebkitLineClamp: 2, WebkitBoxOrient: 'vertical' }}
                  >
                    {f.teaser}
                  </p>

                  <div className="mt-2 flex gap-2 flex-wrap">
                    {f.chips.map((c, i) => <Chip key={i}>{c}</Chip>)}
                  </div>

                  <div className="mt-3 grid grid-cols-2 gap-2">
                    <button
                      disabled={locked}
                      onClick={() => openForm(key)}
                      className={`inline-flex h-11 w-full items-center justify-center rounded-xl font-semibold border
                        ${locked
                          ? 'opacity-60 cursor-not-allowed bg-[var(--surface)] border-[var(--border)]'
                          : 'bg-[var(--brand)] text-black border-[color-mix(in_oklab,var(--brand)70%,#000_30%)] active:translate-y-[1px]'}`}
                    >
                      {locked ? '–ü–æ—Å–ª–µ –∫—É—Ä—Å–∞' : '–ó–∞—è–≤–∫–∞'}
                    </button>
                    <button
                      onClick={() => setOpen((s) => ({ ...s, [key]: !expanded }))}
                      className="inline-flex h-11 w-full items-center justify-center rounded-xl font-semibold border border-[var(--border)]
                                 bg-[var(--surface)] active:translate-y-[1px]"
                    >
                      {expanded ? '–°–≤–µ—Ä–Ω—É—Ç—å' : '–ü–æ–¥—Ä–æ–±–Ω–µ–µ'}
                    </button>
                  </div>
                </div>
              </div>

              {expanded && (
                <div className="pt-3 border-t border-[var(--border)] space-y-3">
                  <div>
                    <div className="font-semibold mb-1">–ß—Ç–æ –≤–Ω—É—Ç—Ä–∏</div>
                    <ul className="list-disc pl-5 space-y-1 text-[14px]">
                      {f.bullets.map((b, i) => (<li key={i}>{b}</li>))}
                    </ul>
                  </div>
                  <div>
                    <div className="font-semibold mb-1">–î–ª—è –∫–æ–≥–æ</div>
                    <p className="text-[14px] text-[var(--muted)]">{f.audience}</p>
                  </div>
                  <div>
                    <div className="font-semibold mb-1">–†–µ–∑—É–ª—å—Ç–∞—Ç</div>
                    <p className="text-[14px] text-[var(--muted)]">{f.result}</p>
                  </div>
                  <div>
                    <div className="font-semibold mb-1">–í—Ä–µ–º—è –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è</div>
                    <p className="text-[14px] text-[var(--muted)]">{f.time}</p>
                  </div>
                  <div>
                    <div className="font-semibold mb-1">–¶–µ–Ω–∞</div>
                    <p className="text-[14px] text-[var(--muted)]">{f.price}</p>
                  </div>

                  <button
                    disabled={locked}
                    onClick={() => openForm(key)}
                    className={`inline-flex mt-1 h-11 w-full items-center justify-center rounded-xl font-semibold border
                      ${locked
                        ? 'opacity-60 cursor-not-allowed bg-[var(--surface)] border-[var(--border)]'
                        : 'bg-[var(--brand)] text-black border-[color-mix(in_oklab,var(--brand)70%,#000_30%)] active:translate-y-[1px]'}`}
                  >
                    {locked ? '–ü–æ—Å–ª–µ –∫—É—Ä—Å–∞' : '–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
                  </button>
                </div>
              )}
            </article>
          );
        })}
      </section>

      <p className="mt-6 pb-24 text-center text-xs text-[var(--muted)]">@your_bot</p>

      {formOpen && (
        <FormModal
          formatKey={formOpen}
          title={formats[formOpen].title}
          onClose={() => setFormOpen(null)}
          locked={locked}
          tgName={tgUser?.name || ''}
          tgUsername={tgUser?.username || ''}
          onSubmit={async (payload) => {
            const msg = [
              `–§–æ—Ä–º–∞—Ç: ${payload.format === 'group' ? '–ì—Ä—É–ø–ø–æ–≤–æ–π' : '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π'}`,
              payload.name ? `–ò–º—è: ${payload.name}` : null,
              payload.handle ? `TG: ${payload.handle}` : null,
              payload.phone ? `–¢–µ–ª–µ—Ñ–æ–Ω: ${payload.phone}` : null,
              payload.start ? `–°—Ç–∞—Ä—Ç: ${payload.start}` : null,
              payload.comment ? `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${payload.comment}` : null,
            ].filter(Boolean).join('\n');

            try {
              await createLead({
                lead_type: 'course',
                name: payload.name || undefined,
                handle: payload.handle || undefined,
                phone: payload.phone || undefined,
                comment: [`–°—Ç–∞—Ä—Ç: ${payload.start}`, payload.comment].filter(Boolean).join(' | '),
                message: msg,
              });
              alert('‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –ú—ã —Å–≤—è–∂–µ–º—Å—è –≤ Telegram.');
              setFormOpen(null);
            } catch (e: any) {
              alert('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ' + String(e?.message || e));
            }
          }}
        />
      )}
    </main>
  );
}

function FormModal(props: {
  formatKey: FormatKey;
  title: string;
  locked: boolean;
  tgName: string;
  tgUsername: string;
  onClose: () => void;
  onSubmit: (payload: {
    format: FormatKey;
    name: string;
    handle: string;
    phone: string;
    start: 'now' | 'month' | 'unsure';
    comment: string;
    agree: boolean;
  }) => Promise<void>;
}) {
  const [name, setName] = useState(props.tgName);
  const [handle, setHandle] = useState(props.tgUsername);
  const [phone, setPhone] = useState('');
  const [start, setStart] = useState<'now' | 'month' | 'unsure'>('now');
  const [comment, setComment] = useState('');
  const [agree, setAgree] = useState(false);
  const [sending, setSending] = useState(false);

  const submit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!agree || props.locked || sending) return;
    setSending(true);
    try {
      await props.onSubmit({ format: props.formatKey, name, handle, phone, start, comment, agree });
    } finally { setSending(false); }
  };

  return (
    <div className="fixed inset-0 z-[70]">
      <div className="absolute inset-0 bg-black/50" onClick={props.onClose} />
      <div className="absolute left-1/2 -translate-x-1/2 top-6 w-[min(92vw,420px)]
                      rounded-2xl bg-[var(--surface)] border border-[var(--border)] p-4">
        <div className="text-lg font-bold">–û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É</div>
        <p className="text-sm text-[var(--muted)] mt-0.5">{props.title}</p>

        <form className="mt-3 space-y-2" onSubmit={submit}>
          <div className="grid gap-1">
            <label className="text-xs text-[var(--muted)]">–ò–º—è</label>
            <input className="h-10 rounded-xl px-3 bg-[var(--surface-2)] border border-[var(--border)] outline-none w-full"
                   value={name} onChange={e=>setName(e.target.value)} placeholder="–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è" />
          </div>

          <div className="grid gap-1">
            <label className="text-xs text-[var(--muted)]">–ù–∏–∫/—Ç–µ–ª–µ–≥—Ä–∞–º</label>
            <input className="h-10 rounded-xl px-3 bg-[var(--surface-2)] border border-[var(--border)] outline-none w-full"
                   value={handle} onChange={e=>setHandle(e.target.value)} placeholder="@username" />
          </div>

          <div className="grid gap-1">
            <label className="text-xs text-[var(--muted)]">–¢–µ–ª–µ—Ñ–æ–Ω (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
            <input className="h-10 rounded-xl px-3 bg-[var(--surface-2)] border border-[var(--border)] outline-none w-full"
                   value={phone} onChange={e=>setPhone(e.target.value)} placeholder="+7‚Ä¶" />
          </div>

          <div className="grid gap-1">
            <label className="text-xs text-[var(--muted)]">–£–¥–æ–±–Ω—ã–π —Å—Ç–∞—Ä—Ç</label>
            <select className="h-10 rounded-xl px-3 bg-[var(--surface-2)] border border-[var(--border)] outline-none w-full"
                    value={start} onChange={e=>setStart(e.target.value as any)}>
              <option value="now">–Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ</option>
              <option value="month">–≤ —Ç–µ—á–µ–Ω–∏–µ –º–µ—Å—è—Ü–∞</option>
              <option value="unsure">—É—Ç–æ—á–Ω—é</option>
            </select>
          </div>

          <div className="grid gap-1">
            <label className="text-xs text-[var(--muted)]">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</label>
            <textarea className="min-h-[72px] rounded-xl px-3 py-2 bg-[var(--surface-2)] border border-[var(--border)]
                                 outline-none resize-y w-full"
                      value={comment} onChange={e=>setComment(e.target.value)} placeholder="–ö–æ—Ä–æ—Ç–∫–æ –æ –∑–∞–¥–∞—á–µ, –æ–ø—ã—Ç–µ, –±–∞–Ω–∫–∞—Ö‚Ä¶" />
          </div>

          <label className="flex items-center gap-2 text-sm">
            <input type="checkbox" checked={agree} onChange={(e)=>setAgree(e.target.checked)} />
            <span>–°–æ–≥–ª–∞—Å–µ–Ω –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–Ω–Ω—ã—Ö</span>
          </label>

          <div className="grid grid-cols-2 gap-2 pt-1">
            <button type="button" onClick={props.onClose}
                    className="inline-flex h-11 items-center justify-center rounded-xl bg-[var(--surface-2)] border border-[var(--border)] font-semibold w-full">
              –û—Ç–º–µ–Ω–∞
            </button>
            <button type="submit" disabled={!agree || props.locked || sending}
                    className={`inline-flex h-11 items-center justify-center rounded-xl font-semibold border w-full
                      ${(!agree || props.locked || sending)
                        ? 'opacity-60 cursor-not-allowed bg-[var(--surface)] border-[var(--border)]'
                        : 'bg-[var(--brand)] text-black border-[color-mix(in_oklab,var(--brand)70%,#000_30%)] active:translate-y-[1px]'}`}>
              {sending ? '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º‚Ä¶' : '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É'}
            </button>
          </div>

          <p className="text-xs text-center text-[var(--muted)] pt-1">
            –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ Telegram.
          </p>
        </form>
      </div>
    </div>
  );
}
