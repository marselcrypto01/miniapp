// app/lesson/[id]/page.tsx
'use client';

import React from 'react';
import { useRouter, useParams } from 'next/navigation';
import PresenceClient from '@/components/PresenceClient';
import TestComponent from '@/components/TestComponent';
import { initSupabaseFromTelegram, saveUserProgress, getLessonMaterials, type DbLessonMaterial } from '@/lib/db';

const WRAP = 'mx-auto max-w-[var(--content-max)] px-4';
const CORE_LESSONS_COUNT = 5; // <= –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ ¬´–°–ª–µ–¥—É—é—â–∏–π¬ª –Ω–µ –∏–¥—ë—Ç –¥–∞–ª—å—à–µ 5

type Tab = 'desc' | 'test' | 'goodies';
type Progress = { lesson_id: number; status: 'completed' | 'pending' };

const TITLES: Record<number, string> = {
  1: '–ö—Ä–∏–ø—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤',
  2: '–ê—Ä–±–∏—Ç—Ä–∞–∂: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å',
  3: '–†–∏—Å–∫–∏ –∏ —Å—Ç—Ä–∞—Ö–∏: –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –Ω–∞ —Å—Ç–∞—Ä—Ç–µ',
  4: '5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–±–∏–≤–∞—é—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫',
  5: '–§–∏–Ω–∞–ª: —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç—ã',
};

/* === user-scoped localStorage namespace ‚Äî –∫–∞–∫ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π === */
function getTgIdSync(): string | null {
  try {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const wa = (window as any)?.Telegram?.WebApp;
    const id = wa?.initDataUnsafe?.user?.id;
    return (id ?? null)?.toString?.() ?? null;
  } catch {
    return null;
  }
}
function ns(key: string): string {
  const id = getTgIdSync();
  return id ? `${key}:tg_${id}` : `${key}:anon`;
}

export default function LessonPage() {
  const router = useRouter();
  const params = useParams();
  const id = Number(params?.id || 1);

  const [tab, setTab] = React.useState<Tab>('desc');
  const [done, setDone] = React.useState<boolean>(false);
  const [progress, setProgress] = React.useState<Progress[]>([]);
  const [authReady, setAuthReady] = React.useState(false);
  const [materials, setMaterials] = React.useState<DbLessonMaterial[] | null>(null);
  const [loadingMaterials, setLoadingMaterials] = React.useState(false);

  const title = `–£—Ä–æ–∫ ${id}. ${TITLES[id] ?? '–í–∏–¥–µ–æ-—É—Ä–æ–∫'}`;

  // –ì–æ—Ç–æ–≤–∏–º tg-auth –æ–¥–∏–Ω —Ä–∞–∑, —á—Ç–æ–±—ã saveUserProgress –∏–º–µ–ª client_id
  React.useEffect(() => {
    let off = false;
    (async () => {
      try {
        await initSupabaseFromTelegram();
      } catch {
        // –Ω–∏—á–µ–≥–æ ‚Äî —É—Ä–æ–∫ –≤—Å—ë —Ä–∞–≤–Ω–æ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ —Å–∏–Ω–∫ –≤ –ë–î –º–æ–∂–µ—Ç –æ—Ç–ª–æ–∂–∏—Ç—å—Å—è
      } finally {
        if (!off) setAuthReady(true);
      }
    })();
    return () => {
      off = true;
    };
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π (user-scoped) –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞—Ç—É—Å —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
  React.useEffect(() => {
    try {
      const raw = localStorage.getItem(ns('progress'));
      const arr: Progress[] = raw ? JSON.parse(raw) : [];
      setProgress(Array.isArray(arr) ? arr : []);
      const st = arr.find((p) => p.lesson_id === id)?.status === 'completed';
      setDone(!!st);
    } catch {
      setProgress([]);
      setDone(false);
    }
  }, [id]);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º ¬´–ü–æ–ª–µ–∑–Ω–æ–µ¬ª –∏–∑ Supabase
  React.useEffect(() => {
    let off = false;
    (async () => {
      setLoadingMaterials(true);
      try {
        const data = await getLessonMaterials(id);
        if (!off) setMaterials(data);
      } catch {
        if (!off) setMaterials([]);
      } finally {
        if (!off) setLoadingMaterials(false);
      }
    })();
    return () => { off = true; };
  }, [id]);

  // –û–±–Ω–æ–≤–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–≥—Ä–µ—Å—Å
  const persistProgress = async (arr: Progress[]) => {
    try {
      localStorage.setItem(ns('progress'), JSON.stringify(arr));
    } catch {}
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î (–µ—Å–ª–∏ tg-auth –≥–æ—Ç–æ–≤). –û—à–∏–±–∫–∏ ‚Äî —Ç–∏—Ö–æ.
    try {
      if (authReady) {
        await saveUserProgress(
          arr.map((x) => ({ lesson_id: Number(x.lesson_id), status: x.status }))
        );
      }
    } catch {}
  };

  const toggleDone = async () => {
    try {
      let arr = [...progress];
      const idx = arr.findIndex((p) => p.lesson_id === id);
      const status: 'completed' | 'pending' = done ? 'pending' : 'completed';
      if (idx >= 0) {
        arr[idx] = { ...arr[idx], status };
      } else {
        arr.push({ lesson_id: id, status });
      }
      setProgress(arr);
      setDone(!done);
      await persistProgress(arr);
    } catch {}
  };

  const canGoPrev = id > 1;
  const canGoNext = id < CORE_LESSONS_COUNT; // <- –Ω–µ –¥–∞—ë–º —É–π—Ç–∏ –Ω–∞ 6-–π

  // –î–ª—è Presence ‚Äî –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ CORE_LESSONS_COUNT
  const completedCount = React.useMemo(
    () => progress.filter((p) => p.status === 'completed' && p.lesson_id <= CORE_LESSONS_COUNT).length,
    [progress]
  );
  const coursePct = Math.min(100, Math.round((completedCount / CORE_LESSONS_COUNT) * 100));

  return (
    <main className={`${WRAP} py-4`}>
      {/* –¢–µ–ª–µ–º–µ—Ç—Ä–∏—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ, –Ω–æ –ø–æ–º–æ–≥–∞–µ—Ç –∞–¥–º–∏–Ω–∫–µ –≤–∏–¥–µ—Ç—å —É—Ä–æ–∫) */}
      <PresenceClient page="lesson" activity={`–£—Ä–æ–∫ ${id}`} lessonId={id} progressPct={coursePct} />

      <header className="mb-3 w-full">
        <h1 className="text-2xl font-extrabold tracking-tight leading-[1.1]">{title}</h1>
        <div className="mt-2 h-[3px] w-24 rounded bg-[var(--brand)]" />
      </header>

      <section className="glass p-4 rounded-2xl mb-3 w-full">
        <div className="text-[15px] font-semibold mb-3">üé¨ –í–∏–¥–µ–æ-—É—Ä–æ–∫ #{id}</div>
        <div className="h-44 rounded-xl border border-[var(--border)] grid place-items-center text-[var(--muted)] w-full">
          –ü–ª–µ–µ—Ä (placeholder)
        </div>
      </section>

      {/* –¢–∞–±—ã: –û–ø–∏—Å–∞–Ω–∏–µ / –¢–µ—Å—Ç / –ü–æ–ª–µ–∑–Ω–æ–µ */}
      <div className="w-full mb-3">
        <div className="grid grid-cols-3 rounded-xl overflow-hidden border border-[var(--border)]">
          {[
            { key: 'desc' as const, label: '–û–ø–∏—Å–∞–Ω–∏–µ', icon: 'üìù' },
            { key: 'test' as const, label: '–¢–µ—Å—Ç', icon: '‚úÖ' },
            { key: 'goodies' as const, label: '–ü–æ–ª–µ–∑–Ω–æ–µ', icon: 'üìé' },
          ].map((t, i) => {
            const active = tab === t.key;
            return (
              <button
                key={t.key}
                onClick={() => setTab(t.key)}
                className={`min-h-11 h-auto py-2 w-full flex items-center justify-center gap-1.5
                  text-sm ${active ? 'bg-[var(--brand)] text-black' : 'bg-[var(--surface)] text-[var(--fg)]'}
                  ${i !== 0 ? 'border-l border-[var(--border)]' : ''}`}
                aria-pressed={active}
              >
                <span>{t.icon}</span>
                <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">{t.label}</span>
              </button>
            );
          })}
        </div>
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç —Ç–∞–±–æ–≤ (–ø—Ä–∏–º–µ—Ä) */}
      {tab === 'desc' && (
        <section className="glass p-4 rounded-2xl w-full">
          <ul className="list-disc pl-5 space-y-2 text-[14px]">
            <li>–ë–∞–∑–æ–≤–∞—è —Ç–µ—Ä–º–∏–Ω–æ–ª–æ–≥–∏—è –∏ —á—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–∞.</li>
            <li>–ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è —É—Ä–æ–∫–∞.</li>
            <li>3‚Äì5 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–∑–∏—Å–æ–≤.</li>
            <li>–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞.</li>
          </ul>
        </section>
      )}
      {tab === 'test' && (
        <TestComponent 
          lessonId={id} 
          onTestComplete={(result) => {
            console.log('Test completed:', result);
            // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç–µ—Å—Ç–∞
          }}
        />
      )}
      {tab === 'goodies' && (
        <section className="glass p-4 rounded-2xl w-full">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          <div className="mb-3 flex items-center justify-between">
            <div className="text-[15px] font-semibold">üìé –ü–æ–ª–µ–∑–Ω–æ–µ –∫ —É—Ä–æ–∫—É</div>
            {loadingMaterials ? (
              <div className="text-xs text-[var(--muted)]">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>
            ) : null}
          </div>

          {/* –°–ø–∏—Å–æ–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤ */}
          {(!materials || materials.length === 0) && !loadingMaterials ? (
            <div className="text-sm text-[var(--muted)]">–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.</div>
          ) : (
            <div className="grid gap-2">
              {(materials ?? []).map((m) => (
                <div key={m.id} className="rounded-xl border border-[var(--border)] p-3">
                  {m.kind === 'link' && (
                    <a href={m.url} target="_blank" rel="noreferrer" className="flex items-start gap-3 group">
                      <div className="mt-[2px]">üîó</div>
                      <div className="min-w-0">
                        <div className="text-sm font-semibold group-hover:underline break-words">{m.title}</div>
                        <div className="text-xs text-[var(--muted)] break-words">{m.url}</div>
                      </div>
                    </a>
                  )}
                  {m.kind === 'image' && (
                    <div className="flex items-start gap-3">
                      <div className="mt-[2px]">üñºÔ∏è</div>
                      <div className="min-w-0 w-full">
                        <div className="text-sm font-semibold mb-2 break-words">{m.title}</div>
                        <img src={m.url} alt={m.title} className="w-full rounded-lg border border-[var(--border)]" />
                      </div>
                    </div>
                  )}
                  {m.kind === 'text' && (
                    <div className="flex items-start gap-3">
                      <div className="mt-[2px]">üìù</div>
                      <div className="min-w-0">
                        <div className="text-sm font-semibold mb-1 break-words">{m.title}</div>
                        <div className="text-sm text-[var(--fg)] whitespace-pre-wrap break-words">{m.url}</div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </section>
      )}

      {/* –ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è: 4 –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ –∫–Ω–æ–ø–∫–∏; ¬´–°–ª–µ–¥—É—é—â–∏–π¬ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ 5-–º */}
      <div className="mt-4 w-full grid grid-cols-2 min-[420px]:grid-cols-4 gap-2">
        <button
          onClick={() => canGoPrev && router.push(`/lesson/${id - 1}`)}
          disabled={!canGoPrev}
          className="h-11 rounded-xl bg-[var(--surface)] border border-[var(--border)]
                     font-semibold text-sm disabled:opacity-50 flex items-center justify-center gap-2 w-full"
          title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π"
        >
          <span>‚Üê</span>
          <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">–ü—Ä–µ–¥—ã–¥—É—â–∏–π</span>
        </button>

        <button
          onClick={() => canGoNext && router.push(`/lesson/${id + 1}`)}
          disabled={!canGoNext}
          className="h-11 rounded-xl font-semibold text-sm w-full flex items-center justify-center gap-2
                     disabled:opacity-50
                     bg-[var(--brand)] text-black"
          title="–°–ª–µ–¥—É—é—â–∏–π"
        >
          <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">–°–ª–µ–¥—É—é—â–∏–π</span>
          <span>‚Üí</span>
        </button>

        <button
          onClick={() => router.push('/')}
          className="h-11 rounded-xl bg-[var(--surface)] border border-[var(--border)]
                     flex items-center justify-center gap-2 text-sm w-full"
          title="–ù–∞ –≥–ª–∞–≤–Ω—É—é"
        >
          <span>üè†</span>
          <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">–ù–∞ –≥–ª–∞–≤–Ω—É—é</span>
        </button>

        <button
          onClick={toggleDone}
          className={`h-11 rounded-xl font-semibold text-sm w-full flex items-center justify-center gap-2 border
            ${done
              ? 'bg-[color-mix(in_oklab,green_45%,var(--surface))] text-black border-[var(--border)]'
              : 'bg-[var(--surface)] text-[var(--fg)] border-[var(--border)]'}`}
          title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ"
        >
          <span>{done ? '‚úÖ' : '‚òëÔ∏è'}</span>
          <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">–ü—Ä–æ–π–¥–µ–Ω–æ</span>
        </button>
      </div>

      <div className="pb-24" />
    </main>
  );
}
