'use client';

import React from 'react';
import { useRouter, useParams } from 'next/navigation';
import PresenceClient from '@/components/PresenceClient';
import TestComponent from '@/components/TestComponent';
import {
  initSupabaseFromTelegram,
  saveUserProgress,
  getLessonMaterials,
  type DbLessonMaterial,
} from '@/lib/db';
import VkVideo from '@/components/VkVideo';

const WRAP = 'mx-auto max-w-[var(--content-max)] px-4';
const CORE_LESSONS_COUNT = 5;

/** –í–°–¢–ê–í–¨ –°–í–û–ò –†–ï–§-–°–°–´–õ–ö–ò –ó–î–ï–°–¨ ‚Äî –¥–ª—è –∫–Ω–æ–ø–æ–∫ –±–∏—Ä–∂ –≤ —É—Ä–æ–∫–µ 3 */
const EXCHANGES: Array<{ label: string; href: string }> = [
  { label: '–¢–æ–ø 1 - BingX', href: 'https://bingx.com/invite/N409JF/' },
  { label: '–¢–æ–ø 2 - MEXC', href: 'https://promote.mexc.com/r/6rVhxsI3' },
  { label: '–¢–æ–ø 3 - Bitget', href: 'https://share.bitget.com/u/G0H33NUE' },
];

type Tab = 'desc' | 'test' | 'goodies';
type Progress = { lesson_id: number; status: 'completed' | 'pending' };

const TITLES: Record<number, string> = {
  1: '–ö—Ä–∏–ø—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤',
  2: '–ê—Ä–±–∏—Ç—Ä–∞–∂: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å',
  3: '–†–∏—Å–∫–∏ –∏ —Å—Ç—Ä–∞—Ö–∏: –∫–∞–∫ –∫—É–ø–∏—Ç—å —Å–≤–æ—é –ø–µ—Ä–≤—É—é –∫—Ä–∏–ø—Ç—É',
  4: '5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–±–∏–≤–∞—é—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫',
  5: '–§–∏–Ω–∞–ª: —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç—ã',
};

/** VK-–≤–∏–¥–µ–æ */
const VIDEO_SRC: Record<number, string> = {
  1: 'https://vkvideo.ru/video_ext.php?oid=-232370516&id=456239108&hd=4&hash=f7a8774a46c42003',
  2: 'https://vkvideo.ru/video_ext.php?oid=-232370516&id=456239109&hd=4&hash=6cf7acb62455397d',
  3: 'https://vkvideo.ru/video_ext.php?oid=-232370516&id=456239110&hd=4&hash=61fb46ca6efcd2ca',
  4: 'https://vkvideo.ru/video_ext.php?oid=-232370516&id=456239111&hd=4&hash=f886761db99c9539',
  5: 'https://vkvideo.ru/video_ext.php?oid=-232370516&id=456239112&hd=4&hash=70005799c7f09ad1',
};

/** –û–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ä–æ–∫–∞ */
const DESCRIPTIONS: Record<number, { intro: string; points: string[]; outro: string }> = {
  1: {
    intro: '–ß—Ç–æ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è –∑–∞ —Å–ª–æ–≤–æ–º ¬´–∫—Ä–∏–ø—Ç–∞¬ª? –í —ç—Ç–æ–º –≤–∏–¥–µ–æ —Ç—ã —É–∑–Ω–∞–µ—à—å:',
    points: [
      '–∑–∞—á–µ–º —É–∂–µ 400+ –º–∏–ª–ª–∏–æ–Ω–æ–≤ –ª—é–¥–µ–π –ø–æ –≤—Å–µ–º—É –º–∏—Ä—É –∏—Å–ø–æ–ª—å–∑—É—é—Ç –∫—Ä–∏–ø—Ç—É,',
      '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–ª–æ–∫—á–µ–π–Ω –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏,',
      '–∫–∞–∫–∏–µ –º–æ–Ω–µ—Ç—ã —Ä–µ–∞–ª—å–Ω–æ –Ω—É–∂–Ω—ã –Ω–æ–≤–∏—á–∫—É,',
      '–∏ –ø–æ—á–µ–º—É –Ω–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –±–µ–∑ –º–∏–ª–ª–∏–æ–Ω–∞ –Ω–∞ —Å—á–µ—Ç—É.',
    ],
    outro: 'üìå –≠—Ç–æ –ø–µ—Ä–≤—ã–π —à–∞–≥ –∫ —Ç–æ–º—É, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫—Ä–∏–ø—Ç—É –∏ –ø–µ—Ä–µ—Å—Ç–∞—Ç—å –±–æ—è—Ç—å—Å—è —Ç–æ–≥–æ, —á—Ç–æ —Ç–æ—Ä–º–æ–∑–∏—Ç 9 –∏–∑ 10 –ª—é–¥–µ–π.',
  },
  2: {
    intro: '¬´–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –∫—Ä–∏–ø—Ç–µ¬ª –∑–≤—É—á–∏—Ç –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ? –ù–∞ –¥–µ–ª–µ –µ—Å—Ç—å —Å–ø–æ—Å–æ–±, –≥–¥–µ —Ç—ã –Ω–µ —Ä–∏—Å–∫—É–µ—à—å, –Ω–µ —Ç–æ—Ä–≥—É–µ—à—å –≥—Ä–∞—Ñ–∏–∫–∏ –∏ –Ω–µ –≥–∞–¥–∞–µ—à—å –Ω–∞ —É–¥–∞—á—É. –í —ç—Ç–æ–º –≤–∏–¥–µ–æ —Ä–∞–∑–±–µ—Ä—ë–º:',
    points: [
      '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏,',
      '–ø–æ—á–µ–º—É –¥–µ–Ω—å–≥–∏ –≤ —Å–¥–µ–ª–∫–µ –≤—Å–µ–≥–¥–∞ –∑–∞—â–∏—â–µ–Ω—ã,',
      '–æ—Ç–∫—É–¥–∞ –±–µ—Ä—ë—Ç—Å—è –ø—Ä–∏–±—ã–ª—å, –µ—Å–ª–∏ ¬´–≤—Å–µ —Ç–∞–∫–∏–µ —É–º–Ω—ã–µ¬ª,',
      '–∏ —Å–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–µ—Ç –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–æ–≤–∏—á–æ–∫.',
    ],
    outro: 'üìå –≠—Ç–æ —Ç–∞ —á–∞—Å—Ç—å –∫—Ä–∏–ø—Ç—ã, –∫–æ—Ç–æ—Ä–∞—è –Ω–µ –º–∏—Ñ –∏ –Ω–µ —Ö–∞–π–ø, –∞ –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –¥–æ—Ö–æ–¥–∞.',
  },
  3: {
    intro: '–ë–æ–∏—à—å—Å—è, —á—Ç–æ –∫—Ä–∏–ø—Ç–∞ –Ω–µ–∑–∞–∫–æ–Ω–Ω–∞, –Ω–∞–ª–æ–≥–æ–≤–∞—è –Ω–∞–π–¥—ë—Ç, –∞ –±–∞–Ω–∫ –∑–∞–º–æ—Ä–æ–∑–∏—Ç –∫–∞—Ä—Ç—É? –≠—Ç–æ —Ç–∏–ø–∏—á–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –Ω–æ–≤–∏—á–∫–æ–≤. –ù–æ –ø—Ä–∞–≤–¥–∞ –≤ —Ç–æ–º, —á—Ç–æ 90% –∏–∑ –Ω–∏—Ö ‚Äî –º–∏—Ñ—ã. –í —ç—Ç–æ–º –≤–∏–¥–µ–æ:',
    points: [
      '–ø–æ—á–µ–º—É P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ –Ω–∞—Ä—É—à–∞–µ—Ç –∑–∞–∫–æ–Ω,',
      '–∫–∞–∫ –±–∞–Ω–∫–∏ —Ä–µ–∞–ª—å–Ω–æ –æ—Ç–Ω–æ—Å—è—Ç—Å—è –∫ –ø–µ—Ä–µ–≤–æ–¥–∞–º,',
      '—á—Ç–æ –¥–µ–ª–∞—Ç—å –ø—Ä–∏ –∑–∞–º–æ—Ä–æ–∑–∫–µ –∫–∞—Ä—Ç—ã,',
      '–∏ –∫–∞–∫ –∏—Å–∫–ª—é—á–∏—Ç—å —Ä–∏—Å–∫ ¬´–≥—Ä—è–∑–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤¬ª.',
    ],
    outro: 'üìå –ï—Å–ª–∏ –∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ –∏–≥—Ä—ã, –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –°–º–æ—Ç—Ä–∏, —á—Ç–æ–±—ã –Ω–µ –±–æ—è—Ç—å—Å—è —Ç–∞–º, –≥–¥–µ –Ω–µ—á–µ–≥–æ –±–æ—è—Ç—å—Å—è.',
  },
  4: {
    intro: '–î—É–º–∞–µ—à—å, –∫—É–ø–∏—Ç—å –∫—Ä–∏–ø—Ç—É —Å–ª–æ–∂–Ω–æ –∏ —Ä–∏—Å–∫–æ–≤–∞–Ω–Ω–æ? –ù–∞ –¥–µ–ª–µ —ç—Ç–æ –ø—Ä–æ—â–µ, —á–µ–º –æ–ø–ª–∞—Ç–∏—Ç—å –∫–æ–º–º—É–Ω–∞–ª–∫—É –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –±–∞–Ω–∫–∞. –í —ç—Ç–æ–º –≤–∏–¥–µ–æ:',
    points: [
      '–¢–û–ü-3 –±–∏—Ä–∂–∏, –≥–¥–µ –Ω–æ–≤–∏—á–∫—É —Ä–µ–∞–ª—å–Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—á–∞—Ç—å,',
      '–∫–∞–∫ –∫—É–ø–∏—Ç—å USDT –ø—Ä—è–º–æ –≤ Telegram –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç,',
      '–∑–∞—á–µ–º –Ω—É–∂–µ–Ω USDT –∏ —á—Ç–æ —Å –Ω–∏–º –º–æ–∂–Ω–æ –¥–µ–ª–∞—Ç—å,',
      '—á–µ–∫-–ª–∏—Å—Ç –æ—à–∏–±–æ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Å–ª–∏–≤–∞—é—Ç –¥–µ–Ω—å–≥–∏ —É –Ω–æ–≤–∏—á–∫–æ–≤.',
    ],
    outro: 'üìå –°–º–æ—Ç—Ä–∏ –¥–æ –∫–æ–Ω—Ü–∞ ‚Äî –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ —Ç–≤–æ–π —Å—Ç—Ä–∞—Ö ¬´—è –Ω–µ —Ä–∞–∑–±–µ—Ä—É—Å—å¬ª –∏—Å—á–µ–∑–Ω–µ—Ç.',
  },
  5: {
    intro: '–¢—ã –¥–æ—à—ë–ª –¥–æ —Ñ–∏–Ω–∞–ª–∞ –∫—É—Ä—Å–∞. –ë–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –±—Ä–æ—Å–∞—é—Ç –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω–µ, –∞ —Ç—ã –¥–æ–∫–∞–∑–∞–ª —Å–µ–±–µ, —á—Ç–æ –º–æ–∂–µ—à—å –∏–¥—Ç–∏ –¥–æ –∫–æ–Ω—Ü–∞. –í —ç—Ç–æ–º –≤–∏–¥–µ–æ:',
    points: [
      '—Ä–∞–∑–±–æ—Ä, —á—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å —É —Ç–µ–±—è –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞,',
      '–ø–æ—á–µ–º—É –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤–∞–∂–Ω–µ–µ —Å—É–º–º—ã –Ω–∞ —Å—Ç–∞—Ä—Ç–µ,',
      '–∏—Å—Ç–æ—Ä–∏–∏ —É—á–µ–Ω–∏–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å,',
      '–≥–ª–∞–≤–Ω–æ–µ ‚Äî –≤—ã–±–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç—ã —Å–¥–µ–ª–∞–µ—à—å –¥–∞–ª—å—à–µ.',
    ],
    outro: 'üìå –≠—Ç–æ—Ç —É—Ä–æ–∫ ‚Äî –Ω–µ —Ç–µ–æ—Ä–∏—è. –≠—Ç–æ —Ç–æ—á–∫–∞, –≥–¥–µ —Ä–µ—à–∞–µ—Ç—Å—è: –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –ª–∏ –∫—Ä–∏–ø—Ç–∞ –¥–ª—è —Ç–µ–±—è ¬´–∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π —Ç–µ–º–æ–π¬ª –∏–ª–∏ —Å—Ç–∞–Ω–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º –¥–æ—Ö–æ–¥–∞.',
  },
};

/* === user-scoped localStorage === */
function getTgIdSync(): string | null {
  try {
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    const wa = (window as any)?.Telegram?.WebApp;
    const id = wa?.initDataUnsafe?.user?.id;
    return (id ?? null)?.toString?.() ?? null;
  } catch {
    return null;
  }
}
function ns(key: string): string {
  const id = getTgIdSync();
  return id ? `${key}:tg_${id}` : `${key}:anon`;
}

export default function LessonPage() {
  const router = useRouter();
  const params = useParams();
  const id = Number(params?.id || 1);

  const [tab, setTab] = React.useState<Tab>('desc');
  const [done, setDone] = React.useState<boolean>(false);
  const [progress, setProgress] = React.useState<Progress[]>([]);
  const [authReady, setAuthReady] = React.useState(false);
  const [materials, setMaterials] = React.useState<DbLessonMaterial[] | null>(null);
  const [loadingMaterials, setLoadingMaterials] = React.useState(false);
  const [animateTab, setAnimateTab] = React.useState<Tab>('desc');

  const title = `–£—Ä–æ–∫ ${id}. ${TITLES[id] ?? '–í–∏–¥–µ–æ-—É—Ä–æ–∫'}`;

  React.useEffect(() => {
    let off = false;
    (async () => {
      try {
        await initSupabaseFromTelegram();
      } catch {} finally {
        if (!off) setAuthReady(true);
      }
    })();
    return () => {
      off = true;
    };
  }, []);

  React.useEffect(() => {
    try {
      const raw = localStorage.getItem(ns('progress'));
      const arr: Progress[] = raw ? JSON.parse(raw) : [];
      setProgress(Array.isArray(arr) ? arr : []);
      const st = arr.find((p) => p.lesson_id === id)?.status === 'completed';
      setDone(!!st);
    } catch {
      setProgress([]);
      setDone(false);
    }
  }, [id]);

  React.useEffect(() => {
    let off = false;
    (async () => {
      setLoadingMaterials(true);
      try {
        const data = await getLessonMaterials(id);
        if (!off) setMaterials(data);
      } catch {
        if (!off) setMaterials([]);
      } finally {
        if (!off) setLoadingMaterials(false);
      }
    })();
    return () => {
      off = true;
    };
  }, [id]);

  const persistProgress = async (arr: Progress[]) => {
    try {
      localStorage.setItem(ns('progress'), JSON.stringify(arr));
    } catch {}
    try {
      if (authReady) {
        await saveUserProgress(
          arr.map((x) => ({ lesson_id: Number(x.lesson_id), status: x.status }))
        );
      }
    } catch {}
  };

  const toggleDone = async () => {
    try {
      let arr = [...progress];
      const idx = arr.findIndex((p) => p.lesson_id === id);
      const status: 'completed' | 'pending' = done ? 'pending' : 'completed';
      if (idx >= 0) {
        arr[idx] = { ...arr[idx], status };
      } else {
        arr.push({ lesson_id: id, status });
      }
      setProgress(arr);
      setDone(!done);
      await persistProgress(arr);
    } catch {}
  };

  const canGoPrev = id > 1;
  const canGoNext = id < CORE_LESSONS_COUNT;

  const completedCount = React.useMemo(
    () => progress.filter((p) => p.status === 'completed' && p.lesson_id <= CORE_LESSONS_COUNT).length,
    [progress]
  );
  const coursePct = Math.min(100, Math.round((completedCount / CORE_LESSONS_COUNT) * 100));

  return (
    <main className={`${WRAP} py-4`}>
      <PresenceClient page="lesson" activity={`–£—Ä–æ–∫ ${id}`} lessonId={id} progressPct={coursePct} />

      <header className="mb-3 w-full">
        <h1 className="text-2xl font-extrabold tracking-tight leading-[1.1]">{title}</h1>
        <div className="mt-2 h-[3px] w-24 rounded bg-[var(--brand)]" />
      </header>

      <section className="glass p-4 rounded-2xl mb-3 w-full">
        <div className="text-[15px] font-semibold mb-3">üé¨ –í–∏–¥–µ–æ-—É—Ä–æ–∫ #{id}</div>
        <div className="rounded-xl overflow-hidden border border-[var(--border)] bg-black">
          <VkVideo src={VIDEO_SRC[id]} title={title} />
        </div>
      </section>

      <div className="w-full mb-3">
        <div className="grid grid-cols-3 rounded-xl overflow-hidden border border-[var(--border)]">
          {[
            { key: 'desc' as const, label: '–û–ø–∏—Å–∞–Ω–∏–µ', icon: 'üìù' },
            { key: 'test' as const, label: '–¢–µ—Å—Ç', icon: '‚úÖ' },
            { key: 'goodies' as const, label: '–ü–æ–ª–µ–∑–Ω–æ–µ', icon: 'üìé' },
          ].map((t, i) => {
            const active = tab === t.key;
            return (
              <button
                key={t.key}
                onClick={() => { setTab(t.key); setAnimateTab(t.key); }}
                className={`min-h-11 h-auto py-2 w-full flex items-center justify-center gap-1.5
                  text-sm ${active ? 'bg-[var(--brand)] text-black' : 'bg-[var(--surface)] text-[var(--fg)]'}
                  ${i !== 0 ? 'border-l border-[var(--border)]' : ''}`}
                aria-pressed={active}
              >
                <span>{t.icon}</span>
                <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">{t.label}</span>
              </button>
            );
          })}
        </div>
      </div>

      {tab === 'desc' && (
        <section
          className={`glass p-4 rounded-2xl w-full transition-transform duration-300 ${
            animateTab === 'desc' ? 'animate-[fadeIn_.3s_ease]' : ''
          }`}
        >
          <div className="space-y-3 text-[14px] leading-relaxed">
            <p className="font-medium">{DESCRIPTIONS[id]?.intro}</p>
            <ul className="list-disc pl-5 space-y-1">
              {DESCRIPTIONS[id]?.points.map((p, i) => (
                <li key={i}>{p}</li>
              ))}
            </ul>
            <p className="mt-3 italic text-[var(--muted)]">{DESCRIPTIONS[id]?.outro}</p>
          </div>
        </section>
      )}

      {tab === 'test' && (
        <TestComponent
          lessonId={id}
          onTestComplete={(result) => {
            console.log('Test completed:', result);
          }}
        />
      )}

      {tab === 'goodies' && (
        <section
          className={`glass p-4 rounded-2xl w-full transition-transform duration-300 ${
            animateTab === 'goodies' ? 'animate-[fadeIn_.3s_ease]' : ''
          }`}
        >
          <div className="mb-3 flex items-center justify-between">
            <div className="text-[15px] font-semibold">üìé –ü–æ–ª–µ–∑–Ω–æ–µ –∫ —É—Ä–æ–∫—É</div>
            {loadingMaterials ? (
              <div className="text-xs text-[var(--muted)]">–ó–∞–≥—Ä—É–∑–∫–∞‚Ä¶</div>
            ) : null}
          </div>

          {/* –ö–Ω–æ–ø–∫–∏ –±–∏—Ä–∂ ‚Äî –∫–∞–∫ –≤ –±–æ–Ω—É—Å–∞—Ö. –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–º–∏ –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è —É—Ä–æ–∫–∞ 3 */}
          {id === 3 ? (
            <div className="mb-3">
              <div className="text-[13px] text-[var(--muted)] mb-2">–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –±–∏—Ä–∂–∏ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞:</div>
              <div className="flex flex-wrap">
                {EXCHANGES.map((x) => (
                  <a
                    key={x.label}
                    href={x.href}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-flex items-center px-2.5 py-1 rounded-full border border-[var(--border)] bg-[var(--bg)] text-[12px] mr-2 mb-2 hover:opacity-90 active:translate-y-[1px]"
                  >
                    {x.label} <span className="ml-1">‚Üó</span>
                  </a>
                ))}
              </div>
            </div>
          ) : null}

          {(!materials || materials.length === 0) && !loadingMaterials ? (
            <div className="text-sm text-[var(--muted)]">–ü–æ–∫–∞ –ø—É—Å—Ç–æ. –ó–∞–≥–ª—è–Ω–∏—Ç–µ –ø–æ–∑–∂–µ.</div>
          ) : (
            <div className="grid gap-2">
              {(materials ?? []).map((m, idx) => (
                <div
                  key={m.id}
                  className={`rounded-xl border border-[var(--border)] p-3 bg-[var(--surface)] transition-all duration-300 ${
                    idx % 2 ? 'translate-y-[0.5px]' : ''
                  }`}
                >
                  {m.kind === 'link' && (
                    <div className="flex items-start gap-3">
                      <div className="mt-[2px]">üîó</div>
                      <div className="min-w-0 w-full">
                        <div className="text-sm font-semibold break-words">{m.title}</div>
                        {m.description ? (
                          <div className="text-xs text-[var(--muted)] mt-1 break-words leading-relaxed">
                            {m.description}
                          </div>
                        ) : null}
                        <a
                          href={m.url}
                          target="_blank"
                          rel="noreferrer"
                          className="inline-block mt-2 text-xs px-2 py-1 rounded-lg bg-[var(--surface-2)] border border-[var(--border)] break-all"
                        >
                          {m.url}
                        </a>
                      </div>
                    </div>
                  )}
                  {m.kind === 'image' && (
                    <div className="flex items-start gap-3">
                      <div className="mt-[2px]">üñºÔ∏è</div>
                      <div className="min-w-0 w-full">
                        <div className="text-sm font-semibold mb-2 break-words">{m.title}</div>
                        <div className="rounded-xl overflow-hidden border border-[var(--border)]">
                          <img src={m.url} alt={m.title} className="w-full block" />
                        </div>
                        {m.description ? (
                          <div className="mt-2 text-xs text-[var(--muted)] whitespace-pre-wrap break-words leading-relaxed">
                            {m.description}
                          </div>
                        ) : null}
                      </div>
                    </div>
                  )}
                  {m.kind === 'text' && (
                    <div className="flex items-start gap-3">
                      <div className="mt-[2px]">üìù</div>
                      <div className="min-w-0 w-full">
                        <div className="text-sm font-semibold mb-2 break-words">{m.title}</div>
                        <div className="text-[13.5px] leading-relaxed whitespace-pre-line">
                          {m.url}
                        </div>
                      </div>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </section>
      )}

      <div className="mt-4 w-full grid grid-cols-2 min-[420px]:grid-cols-4 gap-2">
        <button
          onClick={() => canGoPrev && router.push(`/lesson/${id - 1}`)}
          disabled={!canGoPrev}
          className="h-11 rounded-xl bg-[var(--surface)] border border-[var(--border)]
                     font-semibold text-sm disabled:opacity-50 flex items-center justify-center gap-2 w-full"
          title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π"
        >
          <span>‚Üê</span>
          <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">–ü—Ä–µ–¥—ã–¥—É—â–∏–π</span>
        </button>

        <button
          onClick={() => canGoNext && router.push(`/lesson/${id + 1}`)}
          disabled={!canGoNext}
          className="h-11 rounded-xl font-semibold text-sm w-full flex items-center justify-center gap-2
                     disabled:opacity-50
                     bg-[var(--brand)] text-black"
          title="–°–ª–µ–¥—É—é—â–∏–π"
        >
          <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">–°–ª–µ–¥—É—é—â–∏–π</span>
          <span>‚Üí</span>
        </button>

        <button
          onClick={() => router.push('/')}
          className="h-11 rounded-xl bg-[var(--surface)] border border-[var(--border)]
                     flex items-center justify-center gap-2 text-sm w-full"
          title="–ù–∞ –≥–ª–∞–≤–Ω—É—é"
        >
          <span>üè†</span>
          <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">–ù–∞ –≥–ª–∞–≤–Ω—É—é</span>
        </button>

        <button
          onClick={toggleDone}
          className={`h-11 rounded-xl font-semibold text-sm w-full flex items-center justify-center gap-2 border
            ${done
              ? 'bg-[color-mix(in_oklab,green_45%,var(--surface))] text-black border-[var(--border)]'
              : 'bg-[var(--surface)] text-[var(--fg)] border-[var(--border)]'}`}
          title="–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ"
        >
          <span>{done ? '‚úÖ' : '‚òëÔ∏è'}</span>
          <span className="whitespace-nowrap [font-size:clamp(12px,2.8vw,14px)]">–ü—Ä–æ–π–¥–µ–Ω–æ</span>
        </button>
      </div>

      <div className="pb-24" />
    </main>
  );
}

