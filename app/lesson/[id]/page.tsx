'use client';

import React, { use, useEffect, useMemo, useState } from 'react';
import Link from 'next/link';
import PresenceClient from '@/components/PresenceClient';
import { getLessonById } from '@/lib/lessons';

type Progress = { lesson_id: number; status: 'completed' | 'pending' };
type TabKey = 'desc' | 'test' | 'materials';

export default function LessonPage({ params }: { params: Promise<{ id: string }> }) {
  // Next.js 15: params ‚Äî Promise, –¥–æ—Å—Ç–∞—ë–º —á–µ—Ä–µ–∑ React.use()
  const { id } = use(params);
  const idNum = Number(id);
  const meta = getLessonById(idNum);

  const hasTest = !!meta?.hasTest;
  const tabs = useMemo<TabKey[]>(
    () => (hasTest ? ['desc', 'test', 'materials'] : ['desc', 'materials']),
    [hasTest]
  );

  const [tab, setTab] = useState<TabKey>('desc');
  const [progress, setProgress] = useState<Progress[]>([]);

  // ---------- —Å—Ç—Ä–æ–≥–æ–µ —á—Ç–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏–∑ localStorage ----------
  function readProgress(): Progress[] {
    try {
      const raw = localStorage.getItem('progress');
      if (!raw) return [];
      const arr = JSON.parse(raw) as unknown;
      if (!Array.isArray(arr)) return [];
      return arr
        .map((r: any): Progress | null => {
          const lesson_id = Number(r?.lesson_id);
          const status: Progress['status'] =
            r?.status === 'completed' ? 'completed' : 'pending';
          return Number.isFinite(lesson_id) ? { lesson_id, status } : null;
        })
        .filter(Boolean) as Progress[];
    } catch {
      return [];
    }
  }

  useEffect(() => {
    setProgress(readProgress());
  }, []);

  // –æ—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ (—Å —è–≤–Ω–æ–π —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
  const markCompleted = () => {
    setProgress((prev): Progress[] => {
      const exists = prev.find((p) => p.lesson_id === idNum);
      const next: Progress[] = exists
        ? prev.map((p): Progress =>
            p.lesson_id === idNum ? { ...p, status: 'completed' } as Progress : p
          )
        : [...prev, { lesson_id: idNum, status: 'completed' }];

      try {
        localStorage.setItem('progress', JSON.stringify(next));
      } catch {}
      return next;
    });
  };

  const isCompleted = progress.some(
    (p) => p.lesson_id === idNum && p.status === 'completed'
  );

  // —Å–æ—Å–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏
  const prevId = idNum > 1 ? idNum - 1 : null;
  const nextId = idNum < 6 ? idNum + 1 : null;

  if (!meta) {
    return (
      <main className="mx-auto max-w-xl px-4 py-8">
        <div className="glass rounded-xl p-6">–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
      </main>
    );
  }

  return (
    <main className="mx-auto max-w-xl px-4 py-5">
      <PresenceClient
        page="lesson"
        lessonId={idNum}
        activity={`–£—Ä–æ–∫ #${idNum} | –≤–∫–ª–∞–¥–∫–∞: ${tab}`}
      />

      <div className="mb-3 flex items-center justify-between">
        <Link href="/" className="btn--outline">‚Üê –ù–∞–∑–∞–¥</Link>
        <div className="text-xl font-extrabold">{meta.title}</div>
        <Link href="/" className="text-sm text-[var(--muted)]">–ù–∞ –≥–ª–∞–≤–Ω—É—é</Link>
      </div>

      {/* –ó–∞–≥–ª—É—à–∫–∞ –ø–æ–¥ –≤–∏–¥–µ–æ */}
      <div className="glass rounded-xl p-6 text-center">
        <div className="text-lg font-semibold">üé¨ –í–∏–¥–µ–æ-—É—Ä–æ–∫ #{idNum}</div>
        <div className="mt-2 text-sm text-[var(--muted)]">
          –ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä (YouTube/Vimeo/—Ñ–∞–π–ª)
        </div>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="mt-3 flex gap-2">
        {tabs.map((t) => (
          <button
            key={t}
            className={`tab ${tab === t ? 'tab--active' : ''}`}
            onClick={() => setTab(t)}
          >
            {t === 'desc' && 'üìù –û–ø–∏—Å–∞–Ω–∏–µ'}
            {t === 'test' && '‚úÖ –¢–µ—Å—Ç'}
            {t === 'materials' && 'üìé –ú–∞—Ç–µ—Ä–∏–∞–ª—ã'}
          </button>
        ))}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="mt-3 glass rounded-xl p-4">
        {tab === 'desc' && (
          <div className="space-y-2">
            <div className="text-sm text-[var(--muted)]">
              {meta.description || '–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞'}
            </div>
            <ul className="list-disc pl-5 text-sm">
              <li>–ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è —É—Ä–æ–∫–∞</li>
              <li>3‚Äì5 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–∑–∏—Å–æ–≤</li>
              <li>–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</li>
            </ul>
          </div>
        )}

        {tab === 'test' && hasTest && (
          <div className="space-y-2">
            <div className="text-sm text-[var(--muted)]">–ú–∏–Ω–∏-—Ç–µ—Å—Ç (–∑–∞–≥–ª—É—à–∫–∞)</div>
            <button className="btn-brand" onClick={markCompleted}>
              –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ
            </button>
          </div>
        )}

        {tab === 'materials' && (
          <div className="text-sm text-[var(--muted)]">
            –°—Å—ã–ª–∫–∏, —á–µ–∫-–ª–∏—Å—Ç—ã, PDF ‚Äî –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ
          </div>
        )}
      </div>

      {/* –ù–∞–≤–∏–≥–∞—Ü–∏—è */}
      <div className="mt-4 flex items-center justify-between">
        <Link href="/" className="btn--ghost">–ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤</Link>

        <div className="flex gap-2">
          {prevId && (
            <Link className="btn--outline" href={`/lesson/${prevId}`}>
              ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π
            </Link>
          )}
          {nextId && (
            <Link className="btn" href={`/lesson/${nextId}`}>
              –°–ª–µ–¥—É—é—â–∏–π ‚Üí
            </Link>
          )}
        </div>

        <button
          className={`btn ${isCompleted ? 'opacity-70 cursor-default' : ''}`}
          onClick={markCompleted}
          disabled={isCompleted}
        >
          {isCompleted ? '–ü—Ä–æ–π–¥–µ–Ω–æ' : '–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–æ'}
        </button>
      </div>
    </main>
  );
}
