'use client';

import React, { useEffect, useMemo, useState, use as usePromise } from 'react';
import Link from 'next/link';
import { useRouter } from 'next/navigation';
import PresenceClient from '@/components/PresenceClient';
import { CORE_LESSON_COUNT, getLessonById } from '@/lib/lessons';

type Progress = { lesson_id: number; status: 'completed' | 'pending' };

export default function LessonPage(props: { params: Promise<{ id: string }> }) {
  const router = useRouter();

  // –í Next 15 params ‚Äî —ç—Ç–æ Promise, —Ä–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —á–µ—Ä–µ–∑ React.use()
  const { id } = usePromise(props.params);
  const idNum = Number(id);

  // —Ö—É–∫–∏ –í–°–ï–ì–î–ê —Å–≤–µ—Ä—Ö—É (—á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –æ—à–∏–±–∫–∏ ¬´hooks called conditionally¬ª)
  const [tab, setTab] = useState<'desc' | 'test' | 'materials'>('desc');
  const [progress, setProgress] = useState<Progress[]>([]);

  useEffect(() => {
    try {
      const saved = localStorage.getItem('progress');
      if (saved) setProgress(JSON.parse(saved));
    } catch {}
  }, []);

  const isCompleted = useMemo(
    () => progress.find((p) => p.lesson_id === idNum)?.status === 'completed',
    [progress, idNum]
  );

  const markCompleted = () => {
    setProgress((prev) => {
      const exists = prev.find((p) => p.lesson_id === idNum);
      const next = exists
        ? prev.map((p) => (p.lesson_id === idNum ? { ...p, status: 'completed' } : p))
        : [...prev, { lesson_id: idNum, status: 'completed' }];

      try {
        localStorage.setItem('progress', JSON.stringify(next));
        const coreCompleted = next.filter(
          (p) => p.status === 'completed' && p.lesson_id <= CORE_LESSON_COUNT
        ).length;
        localStorage.setItem(
          'all_completed',
          coreCompleted >= CORE_LESSON_COUNT ? 'true' : 'false'
        );
      } catch {}
      return next;
    });
    alert('‚úÖ –£—Ä–æ–∫ –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π');
  };

  const lesson = getLessonById(idNum);
  const prevId = idNum > 1 ? idNum - 1 : null;
  const nextId = idNum < 6 ? idNum + 1 : null;

  if (!lesson || Number.isNaN(idNum)) {
    return (
      <main className="mx-auto max-w-xl px-4 py-5">
        <h1 className="text-2xl font-bold">–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</h1>
        <p className="mt-2 text-sm text-[var(--muted)]">–ü—Ä–æ–≤–µ—Ä—å –Ω–æ–º–µ—Ä —É—Ä–æ–∫–∞.</p>
        <Link href="/" className="btn-brand mt-4 inline-block">‚Üê –ù–∞ –≥–ª–∞–≤–Ω—É—é</Link>
      </main>
    );
  }

  return (
    <main className="mx-auto max-w-xl px-4 py-5">
      <PresenceClient page="lesson" lessonId={idNum} activity={`–£—Ä–æ–∫ #${idNum} | –≤–∫–ª–∞–¥–∫–∞: ${tab}`} />

      <div className="mb-3 flex items-start justify-between">
        <div className="flex items-center gap-3">
          <button
            onClick={() => router.back()}
            className="rounded-md border border-[var(--border)] bg-[var(--surface-2)] px-3 py-2 text-sm"
          >
            ‚Üê –ù–∞–∑–∞–¥
          </button>
          <div>
            <h1 className="text-2xl font-extrabold tracking-tight">{lesson.title}</h1>
            {lesson.subtitle && (
              <div className="mt-1 text-sm text-[var(--muted)]">{lesson.subtitle}</div>
            )}
          </div>
        </div>

        <Link href="/" className="text-sm text-[var(--muted)] hover:underline">
          –ù–∞ –≥–ª–∞–≤–Ω—É—é
        </Link>
      </div>

      <div className="glass overflow-hidden rounded-[18px]">
        <div className="aspect-video grid place-items-center text-[var(--muted)]">
          <div className="text-center">
            <div className="text-lg font-semibold">üé¨ –í–∏–¥–µ–æ-—É—Ä–æ–∫ #{idNum}</div>
            <div className="mt-1 text-sm">–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä (YouTube/Vimeo/—Ñ–∞–π–ª)</div>
          </div>
        </div>
      </div>

      <div className="mt-4">
        <div className="tabs">
          <button className={`tab ${tab === 'desc' ? 'tab--active' : ''}`} onClick={() => setTab('desc')}>
            üìù –û–ø–∏—Å–∞–Ω–∏–µ
          </button>
          {lesson.hasTest && (
            <button className={`tab ${tab === 'test' ? 'tab--active' : ''}`} onClick={() => setTab('test')}>
              ‚úÖ –¢–µ—Å—Ç
            </button>
          )}
          <button
            className={`tab ${tab === 'materials' ? 'tab--active' : ''}`}
            onClick={() => setTab('materials')}
          >
            üìé –ú–∞—Ç–µ—Ä–∏–∞–ª—ã
          </button>
        </div>

        <div className="mt-3 glass rounded-[18px] p-4">
          {tab === 'desc' && (
            <div className="space-y-2 text-sm text-[var(--muted)]">
              <p>{lesson.description || `–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞ #${idNum}.`}</p>
              <ul className="list-disc pl-5">
                <li>–ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è —É—Ä–æ–∫–∞</li>
                <li>3‚Äì5 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–∑–∏—Å–æ–≤</li>
                <li>–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</li>
              </ul>
            </div>
          )}

          {tab === 'test' && lesson.hasTest && (
            <div className="space-y-2 text-sm text-[var(--muted)]">
              <p>–ú–∏–Ω–∏-—Ç–µ—Å—Ç –ø–æ —É—Ä–æ–∫—É #{idNum}. –ü–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞:</p>
              <ol className="list-decimal pl-5">
                <li>–í–æ–ø—Ä–æ—Å 1 ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –ê/–ë/–í</li>
                <li>–í–æ–ø—Ä–æ—Å 2 ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –ê/–ë/–í</li>
                <li>–í–æ–ø—Ä–æ—Å 3 ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –ê/–ë/–í</li>
              </ol>
              <button className="btn-brand mt-2" onClick={() => alert('–¢–µ—Å—Ç ‚Äî –∑–∞–≥–ª—É—à–∫–∞.')}>
                –û—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç—ã
              </button>
            </div>
          )}

          {tab === 'materials' && (
            <div className="space-y-2 text-sm text-[var(--muted)]">
              <p>–ü–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫ —É—Ä–æ–∫—É #{idNum}:</p>
              <ul className="list-disc pl-5">
                <li>PDF/—á–µ–∫-–ª–∏—Å—Ç ‚Äî –∑–∞–≥–ª—É—à–∫–∞</li>
                <li>–°—Å—ã–ª–∫–∏ –Ω–∞ —Å–µ—Ä–≤–∏—Å—ã ‚Äî –∑–∞–≥–ª—É—à–∫–∞</li>
                <li>–®–∞–±–ª–æ–Ω—ã ‚Äî –∑–∞–≥–ª—É—à–∫–∞</li>
              </ul>
              <button className="btn-brand mt-2" onClick={() => alert('–û—Ç–∫—Ä–æ–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª—ã –≤ –±–æ—Ç–µ')}>
                –û—Ç–∫—Ä—ã—Ç—å –≤ –±–æ—Ç–µ
              </button>
            </div>
          )}
        </div>
      </div>

      <div className="mt-4 flex flex-wrap items-center gap-2">
        {!isCompleted ? (
          <button className="btn-brand" onClick={markCompleted}>–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ</button>
        ) : (
          <button className="btn-brand cursor-default opacity-80" disabled>–ü—Ä–æ–π–¥–µ–Ω–æ</button>
        )}

        {prevId && <button className="btn" onClick={() => router.push(`/lesson/${prevId}`)}>‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π</button>}
        {nextId && <button className="btn" onClick={() => router.push(`/lesson/${nextId}`)}>–°–ª–µ–¥—É—é—â–∏–π ‚Üí</button>}
        <button className="btn" onClick={() => router.push('/')}>–ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤</button>
      </div>

      <p className="mt-6 pb-24 text-center text-xs text-[var(--muted)]">@your_bot</p>
    </main>
  );
}
