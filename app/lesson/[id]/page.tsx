// app/lesson/[id]/page.tsx
'use client';

import React, { use, useEffect, useMemo, useState } from 'react';
import Link from 'next/link';
import PresenceClient from '@/components/PresenceClient';
import { getLessonById } from '@/lib/lessons';
import { getUserProgress, saveUserProgress } from '@/lib/db';

type Progress = { lesson_id: number; status: 'completed' | 'pending' };
type TabKey = 'desc' | 'test' | 'materials';

// —Ç–æ—Ç –∂–µ uid, —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç PresenceClient/Home
const UID_KEY = 'presence_uid';
function getClientUid(): string {
  try {
    let uid = localStorage.getItem(UID_KEY);
    if (!uid) {
      uid =
        (typeof crypto !== 'undefined' && 'randomUUID' in crypto)
          ? crypto.randomUUID()
          : Math.random().toString(36).slice(2) + Date.now().toString(36);
      localStorage.setItem(UID_KEY, uid);
    }
    return uid;
  } catch {
    return 'anonymous';
  }
}

export default function LessonPage({ params }: { params: Promise<{ id: string }> }) {
  const { id } = use(params); // Next 15: params ‚Äî Promise
  const idNum = Number(id);

  const meta = getLessonById(idNum);
  const hasTest = !!meta?.hasTest;

  const tabs = useMemo<TabKey[]>(
    () => (hasTest ? ['desc', 'test', 'materials'] : ['desc', 'materials']),
    [hasTest]
  );

  const [tab, setTab] = useState<TabKey>('desc');
  const [progress, setProgress] = useState<Progress[]>([]);
  const [saving, setSaving] = useState(false);

  // —Å—Ç—Ä–æ–≥–∏–π parse –∏–∑ LS
  function readProgressLS(): Progress[] {
    try {
      const raw = localStorage.getItem('progress');
      if (!raw) return [];
      const arr = JSON.parse(raw);
      if (!Array.isArray(arr)) return [];
      return arr
        .map((r: any) => {
          const lesson_id = Number(r?.lesson_id);
          const status: Progress['status'] = r?.status === 'completed' ? 'completed' : 'pending';
          return Number.isFinite(lesson_id) ? { lesson_id, status } : null;
        })
        .filter(Boolean) as Progress[];
    } catch {
      return [];
    }
  }

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: —Å–Ω–∞—á–∞–ª–∞ –∏–∑ –ë–î, –∏–Ω–∞—á–µ ‚Äî –∏–∑ LS
  useEffect(() => {
    const uid = getClientUid();
    (async () => {
      try {
        const rows = await getUserProgress(uid);
        if (rows && rows.length) {
          const arr: Progress[] = rows.map((r) => ({
            lesson_id: Number(r.lesson_id),
            status: r.status === 'completed' ? 'completed' : 'pending',
          }));
          setProgress(arr);
          try {
            localStorage.setItem('progress', JSON.stringify(arr));
          } catch {}
          return;
        }
      } catch {
        // ignore
      }
      setProgress(readProgressLS());
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [idNum]);

  const isCompleted = progress.some((p) => p.lesson_id === idNum && p.status === 'completed');

  // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ (LS + –ë–î, –±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —á—Ç–µ–Ω–∏—è –∏–∑ LS)
  const markCompleted = async () => {
    const uid = getClientUid();

    let next: Progress[] = [];
    setProgress((prev) => {
      const exists = prev.find((p) => p.lesson_id === idNum);
      next = exists
        ? prev.map((p) => (p.lesson_id === idNum ? { ...p, status: 'completed' as const } : p))
        : [...prev, { lesson_id: idNum, status: 'completed' as const }];

      try {
        localStorage.setItem('progress', JSON.stringify(next));
      } catch {}
      return next;
    });

    setSaving(true);
    try {
      await saveUserProgress(uid, next);
    } catch (e) {
      // eslint-disable-next-line no-console
      console.warn('save progress error', e);
    } finally {
      setSaving(false);
    }
  };

  // —Å–æ—Å–µ–¥–Ω–∏–µ —É—Ä–æ–∫–∏
  const prevId = idNum > 1 ? idNum - 1 : null;
  const nextId = idNum < 6 ? idNum + 1 : null;

  if (!meta) {
    return (
      <main className="mx-auto max-w-xl px-4 py-8">
        <div className="glass rounded-xl p-6">–£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω</div>
      </main>
    );
  }

  return (
    <main className="mx-auto max-w-xl px-4 py-5">
      <PresenceClient page="lesson" lessonId={idNum} activity={`–£—Ä–æ–∫ #${idNum} | –≤–∫–ª–∞–¥–∫–∞: ${tab}`} />

      <div className="mb-3 flex items-center justify-between">
        <Link href="/" className="btn--outline">‚Üê –ù–∞–∑–∞–¥</Link>
        <div className="text-xl font-extrabold">{meta.title}</div>
        <Link href="/" className="text-sm text-[var(--muted)]">–ù–∞ –≥–ª–∞–≤–Ω—É—é</Link>
      </div>

      {/* –í–∏–¥–µ–æ */}
      <div className="glass rounded-xl p-6 text-center">
        <div className="text-lg font-semibold">üé¨ –í–∏–¥–µ–æ-—É—Ä–æ–∫ #{idNum}</div>
        <div className="mt-2 text-sm text-[var(--muted)]">–ó–¥–µ—Å—å –±—É–¥–µ—Ç –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ø–ª–µ–µ—Ä (YouTube/Vimeo/—Ñ–∞–π–ª)</div>
      </div>

      {/* –¢–∞–±—ã */}
      <div className="mt-3 flex gap-2">
        {tabs.map((t) => (
          <button
            key={t}
            className={`tab ${tab === t ? 'tab--active' : ''}`}
            onClick={() => setTab(t)}
          >
            {t === 'desc' && 'üìù –û–ø–∏—Å–∞–Ω–∏–µ'}
            {t === 'test' && '‚úÖ –¢–µ—Å—Ç'}
            {t === 'materials' && 'üìé –ú–∞—Ç–µ—Ä–∏–∞–ª—ã'}
          </button>
        ))}
      </div>

      {/* –ö–æ–Ω—Ç–µ–Ω—Ç –≤–∫–ª–∞–¥–æ–∫ */}
      <div className="mt-3 glass rounded-xl p-4">
        {tab === 'desc' && (
          <div className="space-y-2">
            <div className="text-sm text-[var(--muted)]">{meta.description || '–û–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–∞'}</div>
            <ul className="list-disc pl-5 text-sm">
              <li>–ì–ª–∞–≤–Ω–∞—è –∏–¥–µ—è —É—Ä–æ–∫–∞</li>
              <li>3‚Äì5 –∫–ª—é—á–µ–≤—ã—Ö —Ç–µ–∑–∏—Å–æ–≤</li>
              <li>–ß—Ç–æ —Å–¥–µ–ª–∞—Ç—å –ø–æ—Å–ª–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞</li>
            </ul>
          </div>
        )}

        {tab === 'test' && hasTest && (
          <div className="space-y-2">
            <div className="text-sm text-[var(--muted)]">–ú–∏–Ω–∏-—Ç–µ—Å—Ç (–∑–∞–≥–ª—É—à–∫–∞)</div>
            <button className="btn-brand" onClick={markCompleted} disabled={saving || isCompleted}>
              {isCompleted ? '–ü—Ä–æ–π–¥–µ–Ω–æ' : saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ‚Ä¶' : '–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ'}
            </button>
          </div>
        )}

        {tab === 'materials' && (
          <div className="text-sm text-[var(--muted)]">–°—Å—ã–ª–∫–∏, —á–µ–∫-–ª–∏—Å—Ç—ã, PDF ‚Äî –¥–æ–±–∞–≤–∏–º –ø–æ–∑–∂–µ</div>
        )}
      </div>

      {/* –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å ‚Äî ¬´–∫—Ä–∞—Å–∏–≤—ã–µ —è—á–µ–π–∫–∏¬ª */}
      <div className="mt-4 glass rounded-xl p-3 flex items-center justify-between">
        <Link href="/" className="btn--ghost">–ö —Å–ø–∏—Å–∫—É —É—Ä–æ–∫–æ–≤</Link>

        <div className="flex gap-2">
          {prevId && (
            <Link className="btn--outline" href={`/lesson/${prevId}`}>
              ‚Üê –ü—Ä–µ–¥—ã–¥—É—â–∏–π
            </Link>
          )}
          {nextId && (
            <Link className="btn" href={`/lesson/${nextId}`}>
              –°–ª–µ–¥—É—é—â–∏–π ‚Üí
            </Link>
          )}
        </div>

        <button
          className={`btn ${isCompleted ? 'opacity-70 cursor-default' : ''}`}
          onClick={markCompleted}
          disabled={isCompleted || saving}
          title={isCompleted ? '–£—Ä–æ–∫ —É–∂–µ –æ—Ç–º–µ—á–µ–Ω' : '–û—Ç–º–µ—Ç–∏—Ç—å —É—Ä–æ–∫ –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π'}
        >
          {isCompleted ? '–ü—Ä–æ–π–¥–µ–Ω–æ' : saving ? '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ‚Ä¶' : '–û—Ç–º–µ—Ç–∏—Ç—å –ø—Ä–æ–π–¥–µ–Ω–æ'}
        </button>
      </div>
    </main>
  );
}
