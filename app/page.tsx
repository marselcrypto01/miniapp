'use client';

import React, { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/navigation';
import PresenceClient from '@/components/PresenceClient';
import {
  listLessons,
  getRandomDailyQuote,
  getUserProgress,
  saveUserProgress,
} from '@/lib/db';

/* ====================== —Ç–∏–ø—ã/–∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã ====================== */
type Progress = { lesson_id: number; status: 'completed' | 'pending' };
type Lesson = { id: number; title: string; subtitle?: string | null };
type AchievementKey = 'first' | 'unlock' | 'fear' | 'errors' | 'arbitrager';
type Env = 'loading' | 'telegram' | 'browser';

const CORE_LESSONS_COUNT = 5;
const POINTS_PER_LESSON = 100;

const ICONS: Record<number, string> = {
  1: 'üß†',
  2: 'üéØ',
  3: 'üõ°Ô∏è',
  4: '‚ö†Ô∏è',
  5: 'üß≠',
  6: 'üìö',
};

const QUOTES = [
  '–£—á–∏—Å—å –≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≤–∏–¥—è—Ç —à—É–º.',
  '–£—Å–ø–µ—Ö –ª—é–±–∏—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.',
  '–õ—É—á—à–∏–π —Ä–∏—Å–∫ ‚Äî —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—á–∏—Ç–∞–Ω.',
  '–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π. –®–∞–≥ –∑–∞ —à–∞–≥–æ–º.',
  '–ú–∞–ª—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–∏–ª—å–Ω–µ–µ –±–æ–ª—å—à–∏—Ö —Ä—ã–≤–∫–æ–≤ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü.',
];

/* —É—Ä–æ–≤–Ω–∏ (–Ω–æ–≤–∞—è —à–∫–∞–ª–∞) */
type LevelKey = 'novice' | 'megagood' | 'almostpro' | 'arbitrager' | 'cryptoboss';
const LEVELS: Record<LevelKey, { title: string; threshold: number; icon: string }> = {
  novice:     { title: '–ù–æ–≤–∏—á–æ–∫',     threshold: 0,   icon: 'üå±' },
  megagood:   { title: '–ú–µ–≥–∞—Ö–æ—Ä–æ—à',   threshold: 40,  icon: 'üí™' },
  almostpro:  { title: '–ü–æ—á—Ç–∏–ü—Ä–æ—Ñ–∏',  threshold: 80,  icon: '‚ö°' },
  arbitrager: { title: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫', threshold: 120, icon: 'üéØ' },
  cryptoboss: { title: '–ö—Ä–∏–ø—Ç–æ-–±–æ—Å—Å', threshold: 160, icon: 'üëë' },
};

function computeXP(completedCount: number, ach: Record<AchievementKey, boolean>) {
  let xp = completedCount * 20;
  if (ach.first) xp += 5;
  if (ach.unlock) xp += 5;
  if (ach.fear) xp += 5;
  if (ach.errors) xp += 10;
  if (ach.arbitrager) xp += 25;
  return xp;
}
function computeLevel(xp: number): { key: LevelKey; nextAt: number | null; progressPct: number } {
  const order: LevelKey[] = ['novice', 'megagood', 'almostpro', 'arbitrager', 'cryptoboss'];
  let current: LevelKey = 'novice';
  for (const k of order) if (xp >= LEVELS[k].threshold) current = k;
  const idx = order.indexOf(current);
  const next = order[idx + 1];
  if (!next) return { key: current, nextAt: null, progressPct: 100 };
  const from = LEVELS[current].threshold;
  const to = LEVELS[next].threshold;
  const pct = Math.max(0, Math.min(100, Math.round(((xp - from) / (to - from)) * 100)));
  return { key: current, nextAt: to, progressPct: pct };
}

/* uid –æ–±—â–∏–π */
const UID_KEY = 'presence_uid';
function getClientUid(): string {
  try {
    const from = localStorage.getItem(UID_KEY);
    if (from) return from;
    const gen = Math.random().toString(36).slice(2) + Date.now().toString(36);
    localStorage.setItem(UID_KEY, gen);
    return gen;
  } catch {
    return 'anonymous';
  }
}

/* ====================== –ö–û–ú–ü–û–ù–ï–ù–¢ ====================== */
export default function Home() {
  const router = useRouter();

  const [username, setUsername] = useState<string | null>(null);
  const [env, setEnv] = useState<Env>('loading');

  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [progress, setProgress] = useState<Progress[]>([]);
  const [quote, setQuote] = useState<string>('');

  const [achievements, setAchievements] = useState<Record<AchievementKey, boolean>>({
    first: false,
    unlock: false,
    fear: false,
    errors: false,
    arbitrager: false,
  });
  const [allCompleted, setAllCompleted] = useState(false);
  const [progressLoaded, setProgressLoaded] = useState(false);

  /* ===== –≤—ã—á–∏—Å–ª–µ–Ω–∏—è (–≤—Å–µ–≥–¥–∞ –¥–æ —É—Å–ª–æ–≤–Ω—ã—Ö return) ===== */
  const isCompleted = (id: number) =>
    progress.find((p) => p.lesson_id === id)?.status === 'completed';

  const completedCount = useMemo(
    () => progress.filter((p) => p.status === 'completed' && p.lesson_id <= CORE_LESSONS_COUNT).length,
    [progress]
  );

  const coursePct = Math.min(100, Math.round((completedCount / CORE_LESSONS_COUNT) * 100));
  const points = completedCount * POINTS_PER_LESSON;

  const xp = computeXP(completedCount, achievements);
  const { key: levelKey, progressPct } = computeLevel(xp);
  const level = LEVELS[levelKey];

  const checkpoints = useMemo(
    () => Array.from({ length: CORE_LESSONS_COUNT }, (_, i) => (i + 1) * (100 / CORE_LESSONS_COUNT)),
    []
  );

  const coreLessons  = useMemo(() => lessons.filter(l => l.id <= CORE_LESSONS_COUNT), [lessons]);
  const bonusLessons = useMemo(() => lessons.filter(l => l.id >  CORE_LESSONS_COUNT), [lessons]);

  /* ===== Telegram / –¥–µ–º–æ-—Ä–µ–∂–∏–º ===== */
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const demo = params.get('demo') === '1' || process.env.NODE_ENV === 'development';
    let cancelled = false;

    const detect = async () => {
      for (let i = 0; i < 10; i++) {
        const wa = (window as any)?.Telegram?.WebApp;
        if (wa) {
          try {
            wa.ready();
            wa.expand?.();
            const hasInit = typeof wa.initData === 'string' && wa.initData.length > 0;
            if (!cancelled) {
              if (hasInit || demo) {
                setEnv('telegram');
                setUsername(wa.initDataUnsafe?.user?.username || (demo ? 'user' : null));
              } else {
                setEnv('browser');
              }
            }
            return;
          } catch {}
        }
        await new Promise((r) => setTimeout(r, 100));
      }
      if (!cancelled) setEnv(demo ? 'telegram' : 'browser');
      if (demo) setUsername('user');
    };

    void detect();
    return () => { cancelled = true; };
  }, []);

  /* ===== –ó–∞–≥—Ä—É–∑–∫–∞ —É—Ä–æ–∫–æ–≤ + –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ 1‚Äì5 ===== */
  useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        const rows = await listLessons();
        if (cancelled) return;
        const mapped: Lesson[] = rows
          .sort((a: any, b: any) => (a.order_index ?? a.id) - (b.order_index ?? b.id))
          .map((r: any) => ({ id: r.id, title: r.title ?? '', subtitle: r.subtitle ?? undefined }));

        const names: Record<number, string> = {
          1: '–ö—Ä–∏–ø—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤: —á—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º —Ç–µ–±–µ',
          2: '–ê—Ä–±–∏—Ç—Ä–∞–∂: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ–±–º–µ–Ω–µ –∫—Ä–∏–ø—Ç—ã',
          3: '–†–∏—Å–∫–∏ –∏ —Å—Ç—Ä–∞—Ö–∏: –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ',
          4: '5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–±–∏–≤–∞—é—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫',
          5: '–§–∏–Ω–∞–ª: —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç—ã',
        };
        const patched = mapped.map(m => names[m.id] ? { ...m, title: names[m.id] } : m);

        setLessons(patched);
        try { localStorage.setItem('lessons_cache', JSON.stringify(patched)); } catch {}
      } catch {
        setLessons([
          { id: 1, title: '–ö—Ä–∏–ø—Ç–∞ –±–µ–∑ —Å–ª–æ–∂–Ω—ã—Ö —Å–ª–æ–≤: —á—Ç–æ —ç—Ç–æ –∏ –∑–∞—á–µ–º —Ç–µ–±–µ' },
          { id: 2, title: '–ê—Ä–±–∏—Ç—Ä–∞–∂: –ø—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ –æ–±–º–µ–Ω–µ –∫—Ä–∏–ø—Ç—ã' },
          { id: 3, title: '–†–∏—Å–∫–∏ –∏ —Å—Ç—Ä–∞—Ö–∏: –∫–∞–∫ –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –¥–µ–Ω—å–≥–∏ –Ω–∞ —Å—Ç–∞—Ä—Ç–µ' },
          { id: 4, title: '5 –æ—à–∏–±–æ–∫ –Ω–æ–≤–∏—á–∫–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —É–±–∏–≤–∞—é—Ç –∑–∞—Ä–∞–±–æ—Ç–æ–∫' },
          { id: 5, title: '–§–∏–Ω–∞–ª: —Ç–≤–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –≤ –º–∏—Ä –∫—Ä–∏–ø—Ç—ã' },
          { id: 6, title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã', subtitle: '–°–µ–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –±–∞–Ω–∫–æ–≤ –∏ –±–∏—Ä–∂' },
        ]);
      }
    })();
    return () => { cancelled = true; };
  }, []);

  /* ===== –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è ===== */
  useEffect(() => {
    (async () => {
      try {
        const q = await getRandomDailyQuote();
        if (q) { setQuote(q); return; }
      } catch {}
      try {
        const saved = JSON.parse(localStorage.getItem('admin_quotes') || '[]');
        const pool: string[] = Array.isArray(saved) && saved.length ? saved : QUOTES;
        setQuote(pool[Math.floor(Math.random() * pool.length)]);
      } catch {
        setQuote(QUOTES[Math.floor(Math.random() * QUOTES.length)]);
      }
    })();
  }, []);

  /* ===== –û–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ ===== */
  useEffect(() => {
    const refresh = () => {
      try {
        const raw = localStorage.getItem('progress');
        if (raw) setProgress(JSON.parse(raw));
      } catch {}
    };
    window.addEventListener('focus', refresh);
    const onVis = () => document.visibilityState === 'visible' && refresh();
    document.addEventListener('visibilitychange', onVis);
    return () => {
      window.removeEventListener('focus', refresh);
      document.removeEventListener('visibilitychange', onVis);
    };
  }, []);

  /* ===== –ü—Ä–æ–≥—Ä–µ—Å—Å: –ë–î ‚Üí LS ===== */
  useEffect(() => {
    const uid = getClientUid();
    (async () => {
      try {
        const rows = await getUserProgress(uid);
        if (rows?.length) {
          const arr: Progress[] = rows.map((r: any) => ({
            lesson_id: Number(r.lesson_id),
            status: r.status === 'completed' ? 'completed' : 'pending',
          }));
          setProgress(arr);
          try { localStorage.setItem('progress', JSON.stringify(arr)); } catch {}
        } else {
          const raw = localStorage.getItem('progress');
          if (raw) setProgress(JSON.parse(raw) as Progress[]);
        }
      } catch {
        const raw = localStorage.getItem('progress');
        if (raw) setProgress(JSON.parse(raw) as Progress[]);
      }

      try {
        const ach = localStorage.getItem('achievements');
        const all = localStorage.getItem('all_completed') === 'true';
        if (ach) setAchievements(JSON.parse(ach));
        setAllCompleted(all);
      } catch {}

      setProgressLoaded(true);
    })();
  }, []);

  /* ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ + –∞—á–∏–≤–∫–∏ ===== */
  useEffect(() => {
    if (!progressLoaded) return;

    const next = { ...achievements };
    if (isCompleted(1)) next.first = true;
    if (isCompleted(2)) next.unlock = true;
    if (isCompleted(3)) next.fear = true;
    if (isCompleted(4)) next.errors = true;
    if (completedCount === CORE_LESSONS_COUNT) next.arbitrager = true;

    setAchievements(next);
    try { localStorage.setItem('achievements', JSON.stringify(next)); } catch {}

    const finished = completedCount === CORE_LESSONS_COUNT;
    setAllCompleted(finished);
    try { localStorage.setItem('all_completed', finished ? 'true' : 'false'); } catch {}

    try { localStorage.setItem('progress', JSON.stringify(progress)); } catch {}

    (async () => { try { await saveUserProgress(getClientUid(), progress); } catch {} })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [progress, progressLoaded, completedCount]);

  /* ===== –ß–∏–ø —É—Ä–æ–≤–Ω—è: –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –∑–∞–ª–∏–≤–∫–∞ –±–æ—Ä–¥–µ—Ä–∞ ===== */
  const ChipRing: React.FC<{ pct: number; children: React.ReactNode; className?: string }> = ({
    pct, children, className,
  }) => {
    const clamped = Math.max(0, Math.min(100, pct));
    return (
      <div
        className={`rounded-full p-[2px] w-full ${className || ''}`}
        style={{
          border: '1px solid transparent',
          background: `
            linear-gradient(var(--surface), var(--surface)) padding-box,
            linear-gradient(to top, var(--brand) ${clamped}%, rgba(255,255,255,0.08) 0) border-box
          `,
          boxShadow: 'var(--shadow)',
        }}
      >
        <div
          className="flex items-center justify-center gap-2 px-4 py-2 rounded-full"
          style={{ background: 'color-mix(in oklab, var(--surface) 85%, transparent)' }}
        >
          {children}
        </div>
      </div>
    );
  };

  /* ===== –≥–µ–π—Ç ===== */
  if (env === 'loading') return null;

  if (env === 'browser') {
    return (
      <main className="flex h-screen items-center justify-center px-4 overflow-x-hidden">
        <div className="glass p-6 text-center">
          <h1 className="text-xl font-semibold leading-tight">–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram</h1>
          <p className="mt-2 text-sm text-[var(--muted)]">–°—Å—ã–ª–∫–∞ —Å –±–æ—Ç–æ–º –æ—Ç–∫—Ä–æ–µ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É.</p>
        </div>
      </main>
    );
  }

  /* ===== —Ä–∞–∑–º–µ—Ç–∫–∞ ===== */
  return (
    <main className="mx-auto w-full max-w-[720px] px-4 py-4 overflow-x-hidden">
      <PresenceClient page="home" activity="–ì–ª–∞–≤–Ω–∞—è" progressPct={coursePct} />

      {/* ======= –®–ê–ü–ö–ê ======= */}
      <header className="mb-5">
        <h1 className="text-2xl sm:text-3xl font-extrabold tracking-tight leading-[1.1]">
          –ö—É—Ä—Å –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ –∫—Ä–∏–ø—Ç–µ
        </h1>
        <div className="mt-2 h-[3px] w-24 rounded bg-[var(--brand)]" />

        <p className="mt-3 text-[13px] sm:text-sm text-[var(--muted)]">–ü—Ä–∏–≤–µ—Ç, @{username || 'user'}!</p>

        <blockquote
          className="mt-2 rounded-xl border border-[var(--border)] p-3 text-[13px] sm:text-sm italic text-[var(--muted)]"
          style={{
            boxShadow: 'var(--shadow)',
            borderLeftWidth: '4px',
            borderLeftColor: 'var(--brand)',
            background: 'color-mix(in oklab, var(--surface-2) 85%, transparent)',
          }}
        >
          <span className="mr-1">‚Äú</span>{quote}<span className="ml-1">‚Äù</span>
        </blockquote>

        {/* –æ—á–∫–∏ + —É—Ä–æ–≤–µ–Ω—å ‚Äî –≤–æ –≤—Å—é —à–∏—Ä–∏–Ω—É */}
        <div className="mt-4 grid grid-cols-2 gap-2 w-full">
          <div className="w-full">
            <div className="chip px-4 py-2 w-full justify-center">
              <span>üèÜ</span>
              <span className="text-sm font-semibold">{points} –æ—á–∫.</span>
            </div>
          </div>
          <ChipRing pct={progressPct}>
            <span>{level.icon}</span>
            <span className="text-sm font-semibold">{level.title}</span>
          </ChipRing>
        </div>

        {/* —Å—Ç–∞—Ç—É—Å-–±–∞—Ä */}
        <div className="mt-3">
          <div className="relative h-2 rounded-full bg-[var(--surface-2)] border border-[var(--border)] overflow-hidden">
            <div className="absolute inset-y-0 left-0 bg-[var(--brand)]" style={{ width: `${coursePct}%` }} />
            {checkpoints.map((p, i) => (
              <div
                key={i}
                className="absolute top-1/2 -translate-y-1/2 w-2 h-2 rounded-full border border-[var(--border)]"
                style={{ left: `calc(${p}% - 4px)` }}
                title={`–£—Ä–æ–∫ ${i + 1}`}
              />
            ))}
          </div>
          <div className="mt-1 flex items-center justify-between text-[11px] text-[var(--muted)]">
            <span>–ü—Ä–æ–π–¥–µ–Ω–æ: {completedCount}/{CORE_LESSONS_COUNT}</span>
            <span>–û—Å—Ç–∞–ª–æ—Å—å: {Math.max(0, CORE_LESSONS_COUNT - completedCount)}</span>
          </div>
        </div>

        {/* –∞—á–∏–≤–∫–∏ ‚Äî –∫–æ–º–ø–∞–∫—Ç–Ω–∞—è –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è –ª–µ–Ω—Ç–∞ */}
        <div className="mt-2 overflow-x-auto no-scrollbar">
          <div className="inline-flex items-center gap-8 whitespace-nowrap">
            {[
              { key: 'first' as const,      icon: 'üë£', label: '–ü–µ—Ä–≤—ã–π —à–∞–≥' },
              { key: 'unlock' as const,     icon: 'üîì', label: '–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –∑–Ω–∞–Ω–∏—è' },
              { key: 'fear' as const,       icon: 'üõ°Ô∏è', label: '–ü–æ–±–µ–¥–∏–ª —Å—Ç—Ä–∞—Ö–∏' },
              { key: 'errors' as const,     icon: '‚úÖ', label: '–û—à–∏–±–∫–∏ –ø–æ–≤–µ—Ä–∂–µ–Ω—ã' },
              { key: 'arbitrager' as const, icon: 'üéØ', label: '–ê—Ä–±–∏—Ç—Ä–∞–∂–Ω–∏–∫' },
            ].map(a => {
              const active = achievements[a.key];
              return (
                <div
                  key={a.key}
                  className={`chip px-2.5 py-1 text-[12px] leading-none ${active ? '' : 'opacity-55'}`}
                  style={{ borderColor: 'var(--border)', background: 'var(--surface-2)' }}
                  title={a.label}
                >
                  <span className="text-[14px]">{a.icon}</span>
                  <span className="font-medium">{a.label}</span>
                </div>
              );
            })}
          </div>
        </div>
      </header>

      {/* ===== –£—Ä–æ–∫–∏ ===== */}
      <section>
        <h2 className="text-xl sm:text-2xl font-bold mb-2">–£—Ä–æ–∫–∏</h2>

        <div className="space-y-3">
          {coreLessons.map((l, idx) => {
            const done = isCompleted(l.id);
            const mins = ({1:7,2:9,3:8,4:6,5:10} as Record<number, number>)[l.id] ?? 6;
            return (
              <div
                key={l.id}
                className="
                  grid gap-3 p-4 rounded-2xl bg-[var(--surface)] border border-[var(--border)]
                  shadow-[0_1px_12px_rgba(0,0,0,.12)]
                  grid-cols-[48px_1fr] sm:grid-cols-[56px_1fr_auto]
                "
              >
                <div className="h-12 w-12 grid place-items-center rounded-xl bg-[var(--bg)] border border-[var(--border)] text-xl">
                  {ICONS[l.id] ?? 'üìò'}
                </div>

                <div className="min-w-0">
                  <div className="text-[17px] sm:text-[18px] font-semibold leading-tight break-words">
                    –£—Ä–æ–∫ {idx + 1}. {l.title}
                  </div>
                  <div className="text-[13px] text-[var(--muted)] mt-1">
                    {mins} –º–∏–Ω ‚Ä¢ –°—Ç–∞—Ç—É—Å: {done ? '–ø—Ä–æ–π–¥–µ–Ω' : '–Ω–µ –Ω–∞—á–∞—Ç'}
                  </div>
                </div>

                <div className="col-span-2 sm:col-span-1 sm:self-center">
                  <button
                    className="w-full sm:w-auto px-4 h-10 rounded-xl bg-[var(--brand)] text-black font-semibold active:translate-y-[1px]"
                    onClick={() => router.push(`/lesson/${l.id}`)}
                  >
                    –°–º–æ—Ç—Ä–µ—Ç—å
                  </button>
                </div>
              </div>
            );
          })}
        </div>

        {/* –ë–æ–Ω—É—Å */}
        <h3 className="text-lg font-semibold mt-6">–ë–æ–Ω—É—Å</h3>
        <p className="text-[12px] text-[var(--muted)] -mt-1 mb-3">
          –ë–æ–Ω—É—Å –æ—Ç–∫—Ä–æ–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞ (—Å–µ–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –±–∞–Ω–∫–æ–≤, –±–∏—Ä–∂)
        </p>

        <div
          className="
            grid gap-3 p-4 rounded-2xl bg-[var(--surface)] border border-[var(--border)]
            grid-cols-[48px_1fr] sm:grid-cols-[56px_1fr_auto]
          "
        >
          <div className="h-12 w-12 grid place-items-center rounded-xl bg-[var(--bg)] border border-[var(--border)] text-xl">
            üìö
          </div>
          <div>
            <div className="text-[17px] font-semibold leading-tight">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã</div>
            <div className="text-[12px] text-[var(--muted)] mt-1">–°–µ–∫—Ä–µ—Ç–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç –±–∞–Ω–∫–æ–≤ –∏ –±–∏—Ä–∂</div>
          </div>
          <div className="col-span-2 sm:col-span-1 sm:self-center">
            <button
              className="w-full sm:w-auto px-4 h-10 rounded-xl bg-[var(--brand)] text-black font-semibold active:translate-y-[1px]"
              onClick={() => allCompleted && router.push('/lesson/6')}
              disabled={!allCompleted}
              title={allCompleted ? '–û—Ç–∫—Ä—ã—Ç—å –±–æ–Ω—É—Å' : '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤'}
            >
              {allCompleted ? '–û—Ç–∫—Ä—ã—Ç—å' : '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫—É—Ä—Å–∞'}
            </button>
          </div>
        </div>
      </section>

      {/* ===== FAQ ===== */}
      <h2 className="mt-6 text-xl sm:text-2xl font-bold">FAQ</h2>
      <div className="mt-3 space-y-2">
        {[
          {
            q: '–ê –µ—Å–ª–∏ —É –º–µ–Ω—è –≤—Å–µ–≥–æ 10‚Äì20 —Ç—ã—Å—è—á ‚Äî —ç—Ç–æ –≤–æ–æ–±—â–µ –∏–º–µ–µ—Ç —Å–º—ã—Å–ª?',
            a: 'üëâ –î–∞. –î–∞–∂–µ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Å—É–º–º–æ–π –º–æ–∂–Ω–æ —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç. –†–µ–∫–æ–º–µ–Ω–¥—É—é –Ω–∞—á–∏–Ω–∞—Ç—å –æ—Ç 20 —Ç—ã—Å—è—á —Ä—É–±–ª–µ–π ‚Äî —ç—Ç–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º —É–∂–µ –±—É–¥–µ—Ç –æ—â—É—Ç–∏–º—ã–π –¥–æ—Ö–æ–¥. –ì–ª–∞–≤–Ω–æ–µ ‚Äî –ø–æ–Ω—è—Ç—å –º–µ—Ö–∞–Ω–∏–∫—É, –∞ –¥–∞–ª—å—à–µ –≤—Å—ë –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ—Ç—Å—è.',
          },
          {
            q: '–ù–µ –ø–æ–∑–¥–Ω–æ –ª–∏ –∑–∞—Ö–æ–¥–∏—Ç—å –≤ –∫—Ä–∏–ø—Ç—É –≤ 2025 –≥–æ–¥—É?',
            a: 'üëâ –ù–µ—Ç. –ö—Ä–∏–ø—Ç–æ—Ä—ã–Ω–æ–∫ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞—Å—Ç–∏, –º–∏–ª–ª–∏–æ–Ω—ã –ª—é–¥–µ–π –ø–æ–¥–∫–ª—é—á–∞—é—Ç—Å—è –∫–∞–∂–¥—ã–π –≥–æ–¥. –ê—Ä–±–∏—Ç—Ä–∞–∂ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–∫–∞ –µ—Å—Ç—å —Ä–∞–∑–Ω–∏—Ü–∞ –∫—É—Ä—Å–æ–≤ –∏ –ª—é–¥–∏ –º–µ–Ω—è—é—Ç –≤–∞–ª—é—Ç—É ‚Äî –∞ —ç—Ç–æ –≤—Å–µ–≥–¥–∞.',
          },
          {
            q: '–ü—Ä–∞–≤–¥–∞, —á—Ç–æ –º–æ–∂–Ω–æ —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å –∏ –ø–æ—Ç–µ—Ä—è—Ç—å –≤—Å–µ –¥–µ–Ω—å–≥–∏?',
            a: 'üëâ –£–π—Ç–∏ –≤ –º–∏–Ω—É—Å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ. –í—Å–µ —Å–¥–µ–ª–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç —á–µ—Ä–µ–∑ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ –±–∏—Ä–∂–∏ —Å —ç—Å–∫—Ä–æ—É: –≤—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –¥–µ—à–µ–≤–ª–µ –∏ –ø—Ä–æ–¥–∞—ë—Ç–µ –¥–æ—Ä–æ–∂–µ. –†–∏—Å–∫ —Ç–æ–ª—å–∫–æ –≤ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—à–∏–±–∏—Ç—å—Å—è –≤ –Ω–æ–º–µ—Ä–µ –∫–∞—Ä—Ç—ã). –ü—Ä–∏ –∞–∫–∫—É—Ä–∞—Ç–Ω–æ—Å—Ç–∏ —Ä–∏—Å–∫–æ–≤ –Ω–µ—Ç.',
          },
          {
            q: '–°–∫–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –≤ –º–µ—Å—è—Ü –Ω–æ–≤–∏—á–∫—É?',
            a: 'üëâ –ù–æ–≤–∏—á–∫–∏ –æ–±—ã—á–Ω–æ –¥–µ–ª–∞—é—Ç 50‚Äì80 —Ç—ã—Å. —Ä—É–±–ª–µ–π –ø—Ä–∏ –∫–∞–ø–∏—Ç–∞–ª–µ 50‚Äì100 —Ç—ã—Å. —Ä—É–±–ª–µ–π. –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç 7% –∫ –∫–∞–ø–∏—Ç–∞–ª—É –≤ –¥–µ–Ω—å –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ–¥—Ö–æ–¥–µ. –í—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ –≤–æ–≤–ª–µ—á—ë–Ω–Ω–æ—Å—Ç–∏.',
          },
          {
            q: '–ß—Ç–æ –µ—Å–ª–∏ –±–∞–Ω–∫ –Ω–∞—á–Ω—ë—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã?',
            a: 'üëâ –ï—Å—Ç—å –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –∏ –ª–∏–º–∏—Ç—ã –ø–æ —Å—É–º–º–∞–º. –ë–∞–Ω–∫–∏ –Ω–µ –∑–∞–ø—Ä–µ—â–∞—é—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂, –≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ –≥–Ω–∞—Ç—å –º–∏–ª–ª–∏–æ–Ω—ã —á–µ—Ä–µ–∑ –æ–¥–Ω—É –∫–∞—Ä—Ç—É. –°–æ–±–ª—é–¥–∞—è –ø—Ä–æ—Å—Ç—ã–µ –ø—Ä–∞–≤–∏–ª–∞, –ø—Ä–æ–±–ª–µ–º –Ω–µ –±—É–¥–µ—Ç.',
          },
          {
            q: '–Ø —Ä–∞–±–æ—Ç–∞—é/—É—á—É—Å—å. –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –Ω—É–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ –∞—Ä–±–∏—Ç—Ä–∞–∂?',
            a: 'üëâ –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ 2‚Äì3 —á–∞—Å–æ–≤ –≤ –¥–µ–Ω—å. –≠—Ç–æ–≥–æ —Ö–≤–∞—Ç–∞–µ—Ç, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å —Å–¥–µ–ª–∫–∏ –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å. –ê—Ä–±–∏—Ç—Ä–∞–∂ –ª–µ–≥–∫–æ —Å–æ–≤–º–µ—â–∞—Ç—å —Å —Ä–∞–±–æ—Ç–æ–π –∏–ª–∏ —É—á—ë–±–æ–π.',
          },
          {
            q: '–ê –≤–¥—Ä—É–≥ —è –Ω–µ —Ä–∞–∑–±–µ—Ä—É—Å—å? –≠—Ç–æ –Ω–µ —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω–æ?',
            a: 'üëâ –í—Å—ë –ø–æ–¥–∞—ë—Ç—Å—è –ø–æ—à–∞–≥–æ–≤–æ. –ï—Å—Ç—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä, —á–µ–∫-–ª–∏—Å—Ç—ã –∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏. –î–∞–∂–µ –ø–æ–ª–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫ –±—ã—Å—Ç—Ä–æ –≤–∫–ª—é—á–∞–µ—Ç—Å—è.',
          },
          {
            q: '–ß–µ–º –∞—Ä–±–∏—Ç—Ä–∞–∂ –ª—É—á—à–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–π –≤ –º–æ–Ω–µ—Ç—ã –∏–ª–∏ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞?',
            a: 'üëâ –í —Ç—Ä–µ–π–¥–∏–Ω–≥–µ –∏ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è—Ö –¥–æ—Ö–æ–¥ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —É–≥–∞–¥—ã–≤–∞–Ω–∏–π. –í –∞—Ä–±–∏—Ç—Ä–∞–∂–µ –¥–æ—Ö–æ–¥ —Å–∏—Å—Ç–µ–º–Ω—ã–π: –∫—É–ø–∏–ª –¥–µ—à–µ–≤–ª–µ ‚Äî –ø—Ä–æ–¥–∞–ª –¥–æ—Ä–æ–∂–µ. –ó–∞—Ä–∞–±–æ—Ç–æ–∫ —Å—Ä–∞–∑—É, –∞ –Ω–µ —á–µ—Ä–µ–∑ –º–µ—Å—è—Ü—ã.',
          },
          {
            q: '–ù—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–æ—Ö–æ–¥ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏–ª–∏ –±–æ—è—Ç—å—Å—è –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫?',
            a: 'üëâ –ù–∞–ª–æ–≥–æ–≤–æ–≥–æ —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è P2P-–∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –Ω–µ—Ç. –ú—ã –Ω–µ –Ω–∞—Ä—É—à–∞–µ–º –∑–∞–∫–æ–Ω. –ó–∞ 4+ –≥–æ–¥–∞ –Ω–µ –±—ã–ª–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç –Ω–∞–ª–æ–≥–æ–≤–æ–π –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.',
          },
          {
            q: '–ê –µ—Å–ª–∏ —É –º–µ–Ω—è –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–π –∫–∞—Ä—Ç—ã/–±–∞–Ω–∫–∞?',
            a: 'üëâ –î–∞–º –ø–æ–¥–±–æ—Ä–∫—É –ª—É—á—à–∏—Ö –±–∞–Ω–∫–æ–≤ –∏ –ø–ª–∞—Ç—ë–∂–Ω—ã—Ö —Å–∏—Å—Ç–µ–º –≤ –±–æ–Ω—É—Å–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–∞—Ö –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –∫—É—Ä—Å–∞.',
          },
          {
            q: '–ê –µ—Å–ª–∏ –∫—É—Ä—Å –∑–∞–∫—Ä–æ—é—Ç –∏–ª–∏ –∫—Ä–∏–ø—Ç—É –∑–∞–ø—Ä–µ—Ç—è—Ç?',
            a: 'üëâ –ü–æ–ª–Ω—ã–π –∑–∞–ø—Ä–µ—Ç –æ–±–º–µ–Ω–∞ –Ω–µ–≤–æ–∑–º–æ–∂–µ–Ω. –î–∞–∂–µ –µ—Å–ª–∏ –æ–¥–∏–Ω –±–∞–Ω–∫ —É–∂–µ—Å—Ç–æ—á–∏—Ç –ø—Ä–∞–≤–∏–ª–∞, –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã.',
          },
          {
            q: '–ù—É–∂–Ω–æ –ª–∏ —Å–∏–¥–µ—Ç—å –∑–∞ –∫–æ–º–ø—å—é—Ç–µ—Ä–æ–º –≤–µ—Å—å –¥–µ–Ω—å?',
            a: 'üëâ –ù–µ—Ç. –í—Å–µ —Å–¥–µ–ª–∫–∏ —É–¥–æ–±–Ω–æ –¥–µ–ª–∞—Ç—å —Å —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª–∏–∫–æ–≤ –∏ —Å–¥–µ–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.',
          },
        ].map((f, i) => (
          <details key={i} className="glass rounded-[14px] p-3">
            <summary className="cursor-pointer font-semibold text-[15px] leading-tight">{f.q}</summary>
            <p className="mt-2 text-[13px] sm:text-sm text-[var(--muted)] leading-snug whitespace-pre-wrap">
              {f.a}
            </p>
          </details>
        ))}
      </div>

      <p className="mt-6 pb-24 text-center text-xs text-[var(--muted)]">@your_bot</p>
    </main>
  );
}
