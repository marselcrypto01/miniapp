'use client';

import React, { useEffect, useMemo, useState } from 'react';
import { useRouter } from 'next/navigation';
import PresenceClient from '@/components/PresenceClient';

type Progress = { lesson_id: number; status: 'completed' | 'pending' };
type Lesson = { id: number; title: string; subtitle?: string };
type AchievementKey = 'first' | 'risk' | 'finisher' | 'simulator';

const ICONS: Record<number, string> = {
  1: 'üß†',
  2: 'üéØ',
  3: 'üõ°Ô∏è',
  4: '‚ö†Ô∏è',
  5: 'üß≠',
  6: 'üìö',
};

const QUOTES = [
  '–£—á–∏—Å—å –≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≤–∏–¥—è—Ç —à—É–º.',
  '–£—Å–ø–µ—Ö –ª—é–±–∏—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.',
  '–õ—É—á—à–∏–π —Ä–∏—Å–∫ ‚Äî —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—á–∏—Ç–∞–Ω.',
  '–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π. –®–∞–≥ –∑–∞ —à–∞–≥–æ–º.',
  '–ú–∞–ª—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–∏–ª—å–Ω–µ–µ –±–æ–ª—å—à–∏—Ö —Ä—ã–≤–∫–æ–≤ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü.',
];

// ===== –£—Ä–æ–≤–Ω–∏ (–±–µ–∑ –ø–µ—Ä–∫–æ–≤) =====
type LevelKey = 'novice' | 'bronze' | 'silver' | 'gold';
const LEVELS: Record<LevelKey, { title: string; threshold: number; icon: string }> = {
  novice: { title: '–ù–æ–≤–∏—á–æ–∫', threshold: 0, icon: 'üå±' },
  bronze: { title: '–ë—Ä–æ–Ω–∑–∞', threshold: 40, icon: 'ü•â' },
  silver: { title: '–°–µ—Ä–µ–±—Ä–æ', threshold: 80, icon: 'ü•à' },
  gold: { title: '–ó–æ–ª–æ—Ç–æ', threshold: 120, icon: 'ü•á' },
};

function computeXP(completedCount: number, ach: Record<AchievementKey, boolean>) {
  let xp = completedCount * 20; // 5 —É—Ä–æ–∫–æ–≤ ‚Üí 100 XP
  if (ach.first) xp += 5;
  if (ach.risk) xp += 5;
  if (ach.simulator) xp += 5;
  if (ach.finisher) xp += 10;
  return xp;
}
function computeLevel(xp: number): { key: LevelKey; nextAt: number | null; progressPct: number } {
  const order: LevelKey[] = ['novice', 'bronze', 'silver', 'gold'];
  let current: LevelKey = 'novice';
  for (const k of order) if (xp >= LEVELS[k].threshold) current = k;
  const idx = order.indexOf(current);
  const next = order[idx + 1];
  if (!next) return { key: current, nextAt: null, progressPct: 100 };
  const from = LEVELS[current].threshold;
  const to = LEVELS[next].threshold;
  const pct = Math.max(0, Math.min(100, Math.round(((xp - from) / (to - from)) * 100)));
  return { key: current, nextAt: to, progressPct: pct };
}

export default function Home() {
  const router = useRouter();

  const [username, setUsername] = useState<string | null>(null);
  const [isTelegram, setIsTelegram] = useState(true);

  const [progress, setProgress] = useState<Progress[]>([]);
  const [points, setPoints] = useState<number>(610);
  const [quote, setQuote] = useState<string>('');

  const [achievements, setAchievements] = useState<Record<AchievementKey, boolean>>({
    first: false,
    risk: false,
    finisher: false,
    simulator: false,
  });

  const [allCompleted, setAllCompleted] = useState(false);

  const lessons: Lesson[] = useMemo(
    () => [
      { id: 1, title: '–ö—Ä–∏–ø—Ç–∞ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏' },
      { id: 2, title: '–ê—Ä–±–∏—Ç—Ä–∞–∂: –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç' },
      { id: 3, title: '–†–∏—Å–∫–∏, –º–∏—Ñ—ã –∏ —Å—Ç—Ä–∞—Ö–∏' },
      { id: 4, title: '–ì–ª–∞–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤' },
      { id: 5, title: '–ò—Ç–æ–≥: –∫–∞–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ' },
      { id: 6, title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', subtitle: '–ß–µ–∫-–ª–∏—Å—Ç—ã, —à–ø–∞—Ä–≥–∞–ª–∫–∏, —Å—Å—ã–ª–∫–∏‚Ä¶' },
    ],
    []
  );

  // Telegram / –¥–µ–º–æ-—Ä–µ–∂–∏–º
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const demo = params.get('demo') === '1' || process.env.NODE_ENV === 'development';
    const tg = (window as any)?.Telegram?.WebApp;

    if (!tg) {
      if (demo) {
        setIsTelegram(true);
        setUsername('user');
      } else {
        setIsTelegram(false);
      }
      return;
    }

    try {
      tg.expand();
      tg.ready();
      setUsername(tg.initDataUnsafe?.user?.username || null);
      setIsTelegram(true);
    } catch {
      setIsTelegram(demo);
      if (demo) setUsername('user');
    }
  }, []);

  // –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è (—É—á–∏—Ç—ã–≤–∞–µ–º –∞–¥–º–∏–Ω—Å–∫–∏–µ –≤ localStorage)
  useEffect(() => {
    try {
      const saved = JSON.parse(localStorage.getItem('admin_quotes') || '[]');
      const pool: string[] = Array.isArray(saved) && saved.length ? saved : QUOTES;
      setQuote(pool[Math.floor(Math.random() * pool.length)]);
    } catch {
      setQuote(QUOTES[Math.floor(Math.random() * QUOTES.length)]);
    }
  }, []);

  // –ü–æ–¥–Ω—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å/–∞—á–∏–≤–∫–∏/—Ñ–ª–∞–≥ all_completed –∏–∑ localStorage
  useEffect(() => {
    try {
      const saved = localStorage.getItem('progress');
      const ach = localStorage.getItem('achievements');
      const all = localStorage.getItem('all_completed') === 'true';
      if (saved) setProgress(JSON.parse(saved));
      if (ach) setAchievements(JSON.parse(ach));
      setAllCompleted(all);
    } catch {
      // ignore
    }
  }, []);

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è
  const isCompleted = (id: number) =>
    progress.find((p) => p.lesson_id === id)?.status === 'completed';

  const coreLessonsCount = 5;
  const completedCount = progress.filter((p) => p.status === 'completed' && p.lesson_id <= 5).length;
  const bar = Math.min(100, Math.round((completedCount / coreLessonsCount) * 100));

  // –ê–≤—Ç–æ-–∞—á–∏–≤–∫–∏ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
  useEffect(() => {
    const next = { ...achievements };
    if (isCompleted(1)) next.first = true;
    if (isCompleted(3)) next.risk = true;
    if (completedCount === coreLessonsCount) next.finisher = true;

    setAchievements(next);
    try {
      localStorage.setItem('achievements', JSON.stringify(next));
    } catch {}

    const finished = completedCount === coreLessonsCount;
    setAllCompleted(finished);
    try {
      localStorage.setItem('all_completed', finished ? 'true' : 'false');
    } catch {}

    try {
      localStorage.setItem('progress', JSON.stringify(progress));
    } catch {}
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [progress]);

  // ¬´–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ¬ª (–¥–µ–º–æ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π; –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–ª–æ—É ‚Äî –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —É—Ä–æ–∫–∞)
  const complete = (lessonId: number) => {
    setProgress((prev) => {
      const exists = prev.find((p) => p.lesson_id === lessonId);
      return exists
        ? prev.map((p) => (p.lesson_id === lessonId ? { ...p, status: 'completed' } : p))
        : [...prev, { lesson_id: lessonId, status: 'completed' }];
    });
    setPoints((x) => x + 10);
  };

  // –£—Ä–æ–≤–µ–Ω—å
  const xp = computeXP(completedCount, achievements);
  const { key: levelKey, progressPct } = computeLevel(xp);
  const level = LEVELS[levelKey];

  // –ú–µ—Ç–∫–∏ –∞—á–∏–≤–æ–∫ –Ω–∞–¥ –ø–æ–ª–æ—Å–æ–π
  const markers = [
    { key: 'first', at: 20, icon: 'üí∏', title: '–ü–µ—Ä–≤—ã–π –∞—Ä–±–∏—Ç—Ä–∞–∂ (–ø–æ—Å–ª–µ 1 —É—Ä–æ–∫–∞)', achieved: achievements.first },
    { key: 'fast', at: 60, icon: '‚ö°', title: '–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç (3 —É—Ä–æ–∫–∞)', achieved: completedCount >= 3 },
    { key: 'risk', at: 60, icon: 'üõ°Ô∏è', title: '–•–æ–ª–æ–¥–Ω–∞—è –≥–æ–ª–æ–≤–∞ (—É—Ä–æ–∫ 3)', achieved: achievements.risk },
    { key: 'fin', at: 100, icon: 'üöÄ', title: '–§–∏–Ω–∞–ª–∏—Å—Ç (–≤—Å–µ —É—Ä–æ–∫–∏)', achieved: achievements.finisher },
    { key: 'sim', at: 100, icon: 'üìä', title: '–°–∏–º—É–ª—è—Ç–æ—Ä—â–∏–∫ (–∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä)', achieved: achievements.simulator },
  ] as const;

  if (!isTelegram) {
    return (
      <main className="flex h-screen items-center justify-center px-4">
        <div className="glass p-6 text-center">
          <h1 className="text-xl font-bold">–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram</h1>
        </div>
      </main>
    );
  }

  return (
    <main className="mx-auto max-w-xl px-4 py-5">
      {/* Presence: –æ—Ç–º–µ—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω–æ–π */}
      <PresenceClient page="home" activity="–ì–ª–∞–≤–Ω–∞—è" progressPct={bar} />

      {/* Header */}
      <div className="mb-3 flex items-start justify-between">
        <div>
          <h1 className="text-3xl font-extrabold tracking-tight">
            –ú–∏–Ω–∏-–∫—É—Ä—Å –ø–æ –∞—Ä–±–∏—Ç—Ä–∞–∂—É
            <br />
            –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
          </h1>
          <div className="mt-2 h-[3px] w-24 rounded bg-[var(--brand)]" />
        </div>

        <div className="flex flex-col items-end gap-1">
          <div className="chip">
            <span>üèÜ</span>
            <span className="text-sm font-semibold">{points} –æ—á–∫.</span>
          </div>
          <div className="chip" title="–£—Ä–æ–≤–µ–Ω—å –ø–æ –æ–ø—ã—Ç—É">
            <span>{level.icon}</span>
            <span className="text-sm font-semibold">{level.title}</span>
          </div>
          <div className="w-28 h-1 rounded bg-[var(--surface-2)] border border-[var(--border)] overflow-hidden">
            <div className="h-full bg-[var(--brand)]" style={{ width: `${progressPct}%` }} />
          </div>
        </div>
      </div>

      {/* –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ + —Ü–∏—Ç–∞—Ç–∞ */}
      <p className="text-sm text-[var(--muted)]">–ü—Ä–∏–≤–µ—Ç, @{username || 'user'}!</p>
      <p className="mt-1 mb-2 text-sm italic text-[var(--muted)]">üí° {quote}</p>

      {/* –°—Ç–∞—Ç—É—Å-–±–∞—Ä: –º–µ—Ç–∫–∏ ‚Üí –ø–æ–ª–æ—Å–∞ ‚Üí –ø–æ–¥–ø–∏—Å–∏ */}
      <div className="mt-3">
        <div className="relative h-8 mb-2">
          {markers.map((m) => (
            <span
              key={m.key}
              title={m.title}
              className={`absolute -translate-x-1/2 grid place-items-center w-7 h-7 rounded-full text-[13px] ${m.achieved ? '' : 'opacity-45'}`}
              style={{
                left: `${m.at}%`,
                top: 0,
                background: 'color-mix(in oklab, var(--brand-200) 30%, transparent)',
                border: '1px solid color-mix(in oklab, var(--brand) 50%, var(--border))',
                boxShadow: 'var(--shadow)',
              }}
            >
              {m.icon}
            </span>
          ))}
        </div>

        <div className="progress">
          <div className="progress__bar" style={{ width: `${bar}%` }} />
        </div>

        <div className="mt-1 flex items-center justify-between text-[11px] text-[var(--muted)]">
          <span>–ü—Ä–æ–π–¥–µ–Ω–æ: {completedCount}/{coreLessonsCount}</span>
          <span>–û—Å—Ç–∞–ª–æ—Å—å: {Math.max(0, coreLessonsCount - completedCount)}</span>
        </div>
      </div>

      {/* –£—Ä–æ–∫–∏ */}
      <h2 className="mt-6 text-2xl font-bold">–£—Ä–æ–∫–∏</h2>
      <div className="mt-3 space-y-3">
        {lessons.map((l) => {
          const done = isCompleted(l.id);
          const lockedExtra = l.id === 6 && !allCompleted;

          return (
            <div key={l.id} className="glass rounded-[18px] p-4">
              <div className="flex items-center justify-between gap-3">
                <div className="flex items-center gap-3">
                  <div className="grid h-9 w-9 place-items-center rounded bg-[var(--brand-200)] border border-[var(--brand)] text-xl">
                    {ICONS[l.id]}
                  </div>
                  <div>
                    <div className="text-[17px] font-semibold">{l.title}</div>
                    {l.subtitle && <div className="text-sm text-[var(--muted)]">{l.subtitle}</div>}
                  </div>
                </div>

                <div className="hidden text-sm text-[var(--muted)] sm:block">
                  {done ? '‚úÖ –ü—Ä–æ–π–¥–µ–Ω' : lockedExtra ? 'üîí –ó–∞–∫—Ä—ã—Ç–æ' : '‚è≥ –ù–µ –ø—Ä–æ–π–¥–µ–Ω'}
                </div>
              </div>

              <div className="mt-3 flex items-center gap-3">
                {/* –í—Å–µ–≥–¥–∞ –≤–µ–¥—ë–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Ä–æ–∫–∞. 6-–π –º–æ–¥—É–ª—å (–º–∞—Ç–µ—Ä–∏–∞–ª—ã) –±–ª–æ–∫–∏—Ä—É–µ–º –¥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è 1‚Äì5. */}
                <button
                  className="btn-brand"
                  onClick={() => router.push(`/lesson/${l.id}`)}
                  disabled={lockedExtra}
                  title={lockedExtra ? '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤' : '–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫'}
                >
                  {lockedExtra ? '–ó–∞–∫—Ä—ã—Ç–æ' : '–°–º–æ—Ç—Ä–µ—Ç—å'}
                </button>

                {/* –î–æ–ø. –¥–µ–º–æ-–∫–Ω–æ–ø–∫–∞ ¬´–û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ¬ª */}
                {!done && l.id !== 6 && (
                  <button className="btn" onClick={() => complete(l.id)}>
                    –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ–π–¥–µ–Ω–æ
                  </button>
                )}
              </div>
            </div>
          );
        })}
      </div>

      {/* FAQ */}
      <h2 className="mt-6 text-2xl font-bold">FAQ</h2>
      <div className="mt-3 space-y-2">
        {[
          { q: '–ê —á—Ç–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç?', a: '–ï—Å—Ç—å –º–µ—Ç–æ–¥—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞—Ä—Ç –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤. –≠—Ç–æ —á–∞—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ‚Äî —É—á–∏–º—Å—è –æ–±—Ö–æ–¥–∏—Ç—å —Ä–∏—Å–∫–∏.' },
          { q: '–°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?', a: '–í —Å—Ä–µ–¥–Ω–µ–º —É—á–µ–Ω–∏–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å +70k –≤ –º–µ—Å—è—Ü, –Ω–æ –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–∞–ø–∏—Ç–∞–ª–∞.' },
          { q: '–ê –µ—Å–ª–∏ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ –∫—Ä–∏–ø—Ç–µ?', a: '–ö—É—Ä—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É. –†–∞–∑–±–µ—Ä—ë—Ç—Å—è –ª—é–±–æ–π.' },
          { q: '–ü–æ—á–µ–º—É –∞—Ä–±–∏—Ç—Ä–∞–∂ –ª—É—á—à–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞?', a: '–¢—É—Ç –º–µ–Ω—å—à–µ —Ä–∏—Å–∫–æ–≤ –∏ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –Ω–∞ —Ä–∞–∑–Ω–∏—Ü–µ –∫—É—Ä—Å–æ–≤.' },
        ].map((f, i) => (
          <details key={i} className="glass rounded-[14px] p-3">
            <summary className="cursor-pointer font-semibold">{f.q}</summary>
            <p className="mt-2 text-sm text-[var(--muted)]">{f.a}</p>
          </details>
        ))}
      </div>

      <p className="mt-6 pb-24 text-center text-xs text-[var(--muted)]">@your_bot</p>
    </main>
  );
}
