'use client';

import React, { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import PresenceClient from '@/components/PresenceClient';
import {
  listLessons,
  getRandomDailyQuote,
  getUserProgress,
  saveUserProgress,
} from '@/lib/db';

/* ====================== –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–∏–ø—ã ====================== */
type Progress = { lesson_id: number; status: 'completed' | 'pending' };
type Lesson = { id: number; title: string; subtitle?: string | null };
type AchievementKey = 'first' | 'risk' | 'finisher' | 'simulator';
type Env = 'loading' | 'telegram' | 'browser';

/* ====================== –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –æ—á–∫–æ–≤/—É—Ä–æ–∫–æ–≤ ====================== */
const CORE_LESSONS_COUNT = 5;
const POINTS_PER_LESSON = 100;

/* ====================== –∏–∫–æ–Ω–∫–∏ —É—Ä–æ–∫–æ–≤ ====================== */
const ICONS: Record<number, string> = {
  1: 'üß†',
  2: 'üéØ',
  3: 'üõ°Ô∏è',
  4: '‚ö†Ô∏è',
  5: 'üß≠',
  6: 'üìö',
};

/* ===== –∑–∞–ø–∞—Å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã –Ω–∞ —Å–ª—É—á–∞–π –æ—Ñ–ª–∞–π–Ω–∞ –ë–î ===== */
const QUOTES = [
  '–£—á–∏—Å—å –≤–∏–¥–µ—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Ç–∞–º, –≥–¥–µ –¥—Ä—É–≥–∏–µ –≤–∏–¥—è—Ç —à—É–º.',
  '–£—Å–ø–µ—Ö –ª—é–±–∏—Ç –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É.',
  '–õ—É—á—à–∏–π —Ä–∏—Å–∫ ‚Äî —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—Å—á–∏—Ç–∞–Ω.',
  '–î–æ—Ä–æ–≥—É –æ—Å–∏–ª–∏—Ç –∏–¥—É—â–∏–π. –®–∞–≥ –∑–∞ —à–∞–≥–æ–º.',
  '–ú–∞–ª—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å —Å–∏–ª—å–Ω–µ–µ –±–æ–ª—å—à–∏—Ö —Ä—ã–≤–∫–æ–≤ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü.',
];

/* ===== –£—Ä–æ–≤–Ω–∏ (–±–µ–∑ –ø–µ—Ä–∫–æ–≤) ===== */
type LevelKey = 'novice' | 'bronze' | 'silver' | 'gold';
const LEVELS: Record<LevelKey, { title: string; threshold: number; icon: string }> = {
  novice: { title: '–ù–æ–≤–∏—á–æ–∫', threshold: 0, icon: 'üå±' },
  bronze: { title: '–ë—Ä–æ–Ω–∑–∞', threshold: 40, icon: 'ü•â' },
  silver: { title: '–°–µ—Ä–µ–±—Ä–æ', threshold: 80, icon: 'ü•à' },
  gold: { title: '–ó–æ–ª–æ—Ç–æ', threshold: 120, icon: 'ü•á' },
};
function computeXP(completedCount: number, ach: Record<AchievementKey, boolean>) {
  // XP –¥–ª—è –±–µ–π–¥–∂–∞ —É—Ä–æ–≤–Ω—è (–æ—á–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ —Å—á–∏—Ç–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ: 100 –∑–∞ —É—Ä–æ–∫).
  let xp = completedCount * 20;
  if (ach.first) xp += 5;
  if (ach.risk) xp += 5;
  if (ach.simulator) xp += 5;
  if (ach.finisher) xp += 10;
  return xp;
}
function computeLevel(xp: number): { key: LevelKey; nextAt: number | null; progressPct: number } {
  const order: LevelKey[] = ['novice', 'bronze', 'silver', 'gold'];
  let current: LevelKey = 'novice';
  for (const k of order) if (xp >= LEVELS[k].threshold) current = k;
  const idx = order.indexOf(current);
  const next = order[idx + 1];
  if (!next) return { key: current, nextAt: null, progressPct: 100 };
  const from = LEVELS[current].threshold;
  const to = LEVELS[next].threshold;
  const pct = Math.max(0, Math.min(100, Math.round(((xp - from) / (to - from)) * 100)));
  return { key: current, nextAt: to, progressPct: pct };
}

/* ===== uid, –æ–±—â–∏–π —Å PresenceClient ===== */
const UID_KEY = 'presence_uid';
function getClientUid(): string {
  let uid = '';
  try {
    uid = localStorage.getItem(UID_KEY) || '';
    if (!uid) {
      uid = Math.random().toString(36).slice(2) + Date.now().toString(36);
      localStorage.setItem(UID_KEY, uid);
    }
  } catch {}
  return uid || 'anonymous';
}

/* ====================== –ö–û–ú–ü–û–ù–ï–ù–¢ ====================== */
export default function Home() {
  const router = useRouter();

  const [username, setUsername] = useState<string | null>(null);
  const [env, setEnv] = useState<Env>('loading');

  const [lessons, setLessons] = useState<Lesson[]>([]);
  const [progress, setProgress] = useState<Progress[]>([]);
  const [quote, setQuote] = useState<string>('');

  const [achievements, setAchievements] = useState<Record<AchievementKey, boolean>>({
    first: false,
    risk: false,
    finisher: false,
    simulator: false,
  });
  const [allCompleted, setAllCompleted] = useState(false);

  const [progressLoaded, setProgressLoaded] = useState(false);

  /* ===== Telegram / –¥–µ–º–æ-—Ä–µ–∂–∏–º ===== */
  useEffect(() => {
    const params = new URLSearchParams(window.location.search);
    const demo = params.get('demo') === '1' || process.env.NODE_ENV === 'development';

    let cancelled = false;
    const detect = async () => {
      for (let i = 0; i < 10; i++) {
        const wa = (window as any)?.Telegram?.WebApp;
        if (wa) {
          try {
            wa.ready();
            wa.expand?.();
            const hasInit = typeof wa.initData === 'string' && wa.initData.length > 0;
            if (!cancelled) {
              if (hasInit || demo) {
                setEnv('telegram');
                setUsername(wa.initDataUnsafe?.user?.username || (demo ? 'user' : null));
              } else {
                setEnv('browser');
              }
            }
            return;
          } catch {}
        }
        await new Promise((r) => setTimeout(r, 100));
      }
      if (!cancelled) setEnv(demo ? 'telegram' : 'browser');
      if (demo) setUsername('user');
    };
    detect();
    return () => { cancelled = true; };
  }, []);

  /* ===== –£—Ä–æ–∫–∏: –ë–î ‚Üí –∫—ç—à ‚Üí –¥–µ—Ñ–æ–ª—Ç—ã ===== */
  useEffect(() => {
    let cancelled = false;
    (async () => {
      try {
        const rows = await listLessons();
        if (cancelled) return;

        const mapped: Lesson[] = rows
          .sort(
            (
              a: { order_index?: number | null; id: number },
              b: { order_index?: number | null; id: number }
            ) => (a.order_index ?? a.id) - (b.order_index ?? b.id)
          )
          .map((r) => ({ id: r.id, title: r.title ?? '', subtitle: r.subtitle ?? undefined }));

        setLessons(mapped);
        try { localStorage.setItem('lessons_cache', JSON.stringify(mapped)); } catch {}
      } catch {
        const raw = localStorage.getItem('lessons_cache');
        if (raw) {
          try { setLessons(JSON.parse(raw) as Lesson[]); } catch {}
        } else {
          setLessons([
            { id: 1, title: '–ö—Ä–∏–ø—Ç–∞ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏' },
            { id: 2, title: '–ê—Ä–±–∏—Ç—Ä–∞–∂: –∫–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç' },
            { id: 3, title: '–†–∏—Å–∫–∏, –º–∏—Ñ—ã –∏ —Å—Ç—Ä–∞—Ö–∏' },
            { id: 4, title: '–ì–ª–∞–≤–Ω—ã–µ –æ—à–∏–±–∫–∏ –Ω–æ–≤–∏—á–∫–æ–≤' },
            { id: 5, title: '–ò—Ç–æ–≥: –∫–∞–∫ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ' },
            { id: 6, title: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', subtitle: '–ß–µ–∫-–ª–∏—Å—Ç—ã, —à–ø–∞—Ä–≥–∞–ª–∫–∏, —Å—Å—ã–ª–∫–∏‚Ä¶' },
          ]);
        }
      }
    })();
    return () => { cancelled = true; };
  }, []);

  /* ===== –¶–∏—Ç–∞—Ç–∞ –¥–Ω—è ===== */
  useEffect(() => {
    (async () => {
      try {
        const q = await getRandomDailyQuote();
        if (q) { setQuote(q); return; }
      } catch {}
      try {
        const saved = JSON.parse(localStorage.getItem('admin_quotes') || '[]');
        const pool: string[] = Array.isArray(saved) && saved.length ? saved : QUOTES;
        setQuote(pool[Math.floor(Math.random() * pool.length)]);
      } catch {
        setQuote(QUOTES[Math.floor(Math.random() * QUOTES.length)]);
      }
    })();
  }, []);

  // –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏–∑ LS –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤–æ –≤–∫–ª–∞–¥–∫—É
  useEffect(() => {
    const refresh = () => {
      try {
        const raw = localStorage.getItem('progress');
        if (raw) setProgress(JSON.parse(raw));
      } catch {}
    };
    window.addEventListener('focus', refresh);
    const onVis = () => document.visibilityState === 'visible' && refresh();
    document.addEventListener('visibilitychange', onVis);
    return () => {
      window.removeEventListener('focus', refresh);
      document.removeEventListener('visibilitychange', onVis);
    };
  }, []);

  /* ===== –ü—Ä–æ–≥—Ä–µ—Å—Å: –ë–î ‚Üí LS ===== */
  useEffect(() => {
    const uid = getClientUid();
    (async () => {
      try {
        const rows = await getUserProgress(uid);
        if (rows?.length) {
          const arr: Progress[] = rows.map((r) => ({
            lesson_id: Number(r.lesson_id),
            status: r.status === 'completed' ? 'completed' : 'pending',
          }));
          setProgress(arr);
          try { localStorage.setItem('progress', JSON.stringify(arr)); } catch {}
        } else {
          const raw = localStorage.getItem('progress');
          if (raw) setProgress(JSON.parse(raw) as Progress[]);
        }
      } catch {
        const raw = localStorage.getItem('progress');
        if (raw) setProgress(JSON.parse(raw) as Progress[]);
      }

      try {
        const ach = localStorage.getItem('achievements');
        const all = localStorage.getItem('all_completed') === 'true';
        if (ach) setAchievements(JSON.parse(ach));
        setAllCompleted(all);
      } catch {}

      setProgressLoaded(true);
    })();
  }, []);

  /* ===== –í—ã—á–∏—Å–ª–µ–Ω–∏—è ===== */
  const isCompleted = (id: number) =>
    progress.find((p) => p.lesson_id === id)?.status === 'completed';

  const completedCount = progress.filter(
    (p) => p.status === 'completed' && p.lesson_id <= CORE_LESSONS_COUNT
  ).length;

  const bar = Math.min(100, Math.round((completedCount / CORE_LESSONS_COUNT) * 100));
  const points = completedCount * POINTS_PER_LESSON;

  /* ===== –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ ===== */
  useEffect(() => {
    if (!progressLoaded) return;

    const next = { ...achievements };
    if (isCompleted(1)) next.first = true;
    if (isCompleted(3)) next.risk = true;
    if (completedCount === CORE_LESSONS_COUNT) next.finisher = true;

    setAchievements(next);
    try { localStorage.setItem('achievements', JSON.stringify(next)); } catch {}

    const finished = completedCount === CORE_LESSONS_COUNT;
    setAllCompleted(finished);
    try { localStorage.setItem('all_completed', finished ? 'true' : 'false'); } catch {}

    try { localStorage.setItem('progress', JSON.stringify(progress)); } catch {}

    (async () => {
      try { await saveUserProgress(getClientUid(), progress); } catch {}
    })();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [progress, progressLoaded, completedCount]);

  /* ===== –û—Ç–º–µ—Ç–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (–≤–Ω—É—Ç—Ä–∏ —É—Ä–æ–∫–æ–≤ ‚Äî –ø–æ–∑–∂–µ; –Ω–∞ –≥–ª–∞–≤–Ω–æ–π –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º) ===== */
  const complete = (lessonId: number) => {
    setProgress((prev) => {
      const exists = prev.find((p) => p.lesson_id === lessonId);
      return exists
        ? prev.map((p) => (p.lesson_id === lessonId ? { ...p, status: 'completed' } : p))
        : [...prev, { lesson_id: lessonId, status: 'completed' }];
    });
  };

  /* ===== –£—Ä–æ–≤–µ–Ω—å (–¥–ª—è –±–µ–π–¥–∂–∞) ===== */
  const xp = computeXP(completedCount, achievements);
  const { key: levelKey, progressPct } = computeLevel(xp);
  const level = LEVELS[levelKey];

  /* ===== –ì–µ–π—Ç ===== */
  if (env === 'loading') return null;

  if (env === 'browser') {
    return (
      <main className="flex h-screen items-center justify-center px-4">
        <div className="glass p-6 text-center">
          <h1 className="text-xl font-semibold leading-tight">–û—Ç–∫—Ä–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ Telegram</h1>
          <p className="mt-2 text-sm text-[var(--muted)]">–°—Å—ã–ª–∫–∞ —Å –±–æ—Ç–æ–º –æ—Ç–∫—Ä–æ–µ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å—Ä–∞–∑—É.</p>
        </div>
      </main>
    );
  }

  // –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è ¬´–∫—Ä—É–≥–æ–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞¬ª
  const ProgressRing = ({ size = 36, value }: { size?: number; value: number }) => {
    const clamped = Math.max(0, Math.min(100, value));
    const style: React.CSSProperties = {
      width: size,
      height: size,
      borderRadius: '9999px',
      background: `conic-gradient(var(--brand) ${clamped}%, transparent 0)`,
      padding: 2,
    };
    return (
      <div style={style}>
        <div
          className="grid place-items-center rounded-full"
          style={{
            width: '100%',
            height: '100%',
            background: 'var(--surface-2)',
            border: '1px solid var(--border)',
          }}
        >
          <span className="text-base">üèÖ</span>
        </div>
      </div>
    );
  };

  // –∫—Ä–∞—Å–∏–≤—ã–µ —á–µ–∫–ø–æ–∏–Ω—Ç—ã (5 —Å–µ–≥–º–µ–Ω—Ç–æ–≤)
  const checkpoints = new Array(CORE_LESSONS_COUNT).fill(0).map((_, i) => (i + 1) * (100 / CORE_LESSONS_COUNT));
  const filledWidth = `${bar}%`;

  return (
    <main className="mx-auto w-full max-w-md sm:max-w-lg md:max-w-xl px-3 sm:px-4 py-4 sm:py-5">
      {/* Presence */}
      <PresenceClient page="home" activity="–ì–ª–∞–≤–Ω–∞—è" progressPct={bar} />

      {/* ======= –®–ê–ü–ö–ê ======= */}
      <header className="mb-5">
        {/* 1) –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
        <h1 className="text-2xl sm:text-3xl md:text-4xl font-extrabold tracking-tight leading-[1.1]">
          –ö—É—Ä—Å –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ –∫—Ä–∏–ø—Ç–µ
        </h1>
        <div className="mt-2 h-[3px] w-24 rounded bg-[var(--brand)]" />

        {/* 2) –ü—Ä–∏–≤–µ—Ç */}
        <p className="mt-3 text-[13px] sm:text-sm text-[var(--muted)]">
          –ü—Ä–∏–≤–µ—Ç, @{username || 'user'}!
        </p>

        {/* 3) –¶–∏—Ç–∞—Ç–∞ ‚Äî –Ω–∞—Å—Ç–æ—è—â–∏–π –±–ª–æ–∫quote */}
        <blockquote
          className="mt-2 rounded-xl border border-[var(--border)] bg-[color-mix(in_oklab,var(--surface-2) 85%,transparent)] p-3 text-[13px] sm:text-sm italic text-[var(--muted)]"
          style={{
            boxShadow: 'var(--shadow)',
            borderLeftWidth: '4px',
            borderLeftColor: 'var(--brand)',
          }}
        >
          <span className="mr-1">‚Äú</span>{quote}<span className="ml-1">‚Äù</span>
        </blockquote>

        {/* 4) –û—á–∫–∏ + –º–µ–¥–∞–ª—å + –∫—Ä—É–≥–æ–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å –≤–æ–∫—Ä—É–≥ –º–µ–¥–∞–ª–∏ */}
        <div className="mt-4 flex items-center gap-3">
          <div className="chip px-3 py-2">
            <span>üèÜ</span>
            <span className="text-sm font-semibold">{points} –æ—á–∫.</span>
          </div>
          <div className="chip px-3 py-2" title="–£—Ä–æ–≤–µ–Ω—å –ø–æ –æ–ø—ã—Ç—É">
            <span>{level.icon}</span>
            <span className="text-sm font-semibold">{level.title}</span>
          </div>

          {/* —Å–ø—Ä–∞–≤–∞ ‚Äî ¬´–æ–±–≤–æ–¥–∫–∞¬ª –∫–∞–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∫—É—Ä—Å—É */}
          <div className="ml-auto">
            <ProgressRing value={bar} />
          </div>
        </div>
      </header>

      {/* ======= 5) –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å-–±–∞—Ä —Å —Å–µ–≥–º–µ–Ω—Ç–∞–º–∏ ======= */}
      <section className="mt-2">
        <div className="relative h-3 rounded-full bg-[var(--surface-2)] border border-[var(--border)] overflow-hidden">
          <div
            className="absolute inset-y-0 left-0 bg-[var(--brand)]"
            style={{ width: filledWidth, boxShadow: 'inset 0 0 10px rgba(0,0,0,.15)' }}
          />
          {/* —á–µ–∫–ø–æ–∏–Ω—Ç—ã */}
          {checkpoints.map((p, i) => (
            <div
              key={i}
              className="absolute top-1/2 -translate-y-1/2 w-2.5 h-2.5 rounded-full border border-[var(--border)]"
              style={{
                left: `calc(${p}% - 5px)`,
                background: p <= bar ? 'var(--brand)' : 'var(--surface-1)',
              }}
              title={`–£—Ä–æ–∫ ${i + 1}`}
            />
          ))}
        </div>
        <div className="mt-1 flex items-center justify-between text-[11px] text-[var(--muted)]">
          <span>–ü—Ä–æ–π–¥–µ–Ω–æ: {completedCount}/{CORE_LESSONS_COUNT}</span>
          <span>–û—Å—Ç–∞–ª–æ—Å—å: {Math.max(0, CORE_LESSONS_COUNT - completedCount)}</span>
        </div>
      </section>

      {/* ======= 6) –£—Ä–æ–∫–∏ (—Ç–æ–ª—å–∫–æ –∫–Ω–æ–ø–∫–∞ ¬´–°–º–æ—Ç—Ä–µ—Ç—å¬ª) ======= */}
      <h2 className="mt-6 text-xl sm:text-2xl font-bold">–£—Ä–æ–∫–∏</h2>
      <div className="mt-3 space-y-3">
        {lessons.map((l) => {
          const lockedExtra = l.id === 6 && !allCompleted;

          return (
            <div key={l.id} className="glass rounded-[18px] p-4">
              <div className="flex items-center justify-between gap-3">
                <div className="flex items-center gap-3">
                  <div className="grid h-9 w-9 place-items-center rounded bg-[var(--brand-200)] border border-[var(--brand)] text-xl">
                    {ICONS[l.id] ?? 'üìò'}
                  </div>
                  <div>
                    <div className="text-[16px] sm:text-[17px] font-semibold leading-tight">
                      {l.title}
                    </div>
                    {l.subtitle && (
                      <div className="text-[12.5px] sm:text-sm text-[var(--muted)] leading-snug">
                        {l.subtitle}
                      </div>
                    )}
                  </div>
                </div>

                <button
                  className="btn-brand whitespace-nowrap"
                  onClick={() => router.push(`/lesson/${l.id}`)}
                  disabled={lockedExtra}
                  title={lockedExtra ? '–û—Ç–∫—Ä–æ–µ—Ç—Å—è –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤' : '–û—Ç–∫—Ä—ã—Ç—å —É—Ä–æ–∫'}
                >
                  {lockedExtra ? '–ó–∞–∫—Ä—ã—Ç–æ' : '–°–º–æ—Ç—Ä–µ—Ç—å'}
                </button>
              </div>
            </div>
          );
        })}
      </div>

      {/* FAQ */}
      <h2 className="mt-6 text-xl sm:text-2xl font-bold">FAQ</h2>
      <div className="mt-3 space-y-2">
        {[
          { q: '–ê —á—Ç–æ –µ—Å–ª–∏ –∫–∞—Ä—Ç—É –∑–∞–±–ª–æ–∫–∏—Ä—É—é—Ç?', a: '–ï—Å—Ç—å –º–µ—Ç–æ–¥—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫–∞—Ä—Ç –∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤. –≠—Ç–æ —á–∞—Å—Ç—å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ ‚Äî —É—á–∏–º—Å—è –æ–±—Ö–æ–¥–∏—Ç—å —Ä–∏—Å–∫–∏.' },
          { q: '–°–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å?', a: '–í —Å—Ä–µ–¥–Ω–µ–º —É—á–µ–Ω–∏–∫–∏ –Ω–∞—á–∏–Ω–∞—é—Ç —Å +70k –≤ –º–µ—Å—è—Ü, –Ω–æ –≤—Å—ë –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–∞–ø–∏—Ç–∞–ª–∞.' },
          { q: '–ê –µ—Å–ª–∏ —è –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–Ω–∏–º–∞—é –≤ –∫—Ä–∏–ø—Ç–µ?', a: '–ö—É—Ä—Å –ø–æ—Å—Ç—Ä–æ–µ–Ω –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤: –æ—Ç –ø—Ä–æ—Å—Ç–æ–≥–æ –∫ —Å–ª–æ–∂–Ω–æ–º—É. –†–∞–∑–±–µ—Ä—ë—Ç—Å—è –ª—é–±–æ–π.' },
          { q: '–ü–æ—á–µ–º—É –∞—Ä–±–∏—Ç—Ä–∞–∂ –ª—É—á—à–µ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞?', a: '–¢—É—Ç –º–µ–Ω—å—à–µ —Ä–∏—Å–∫–æ–≤ –∏ –Ω–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥—Ä–∞—Ñ–∏–∫–æ–≤. –ó–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å –Ω–∞ —Ä–∞–∑–Ω–∏—Ü–µ –∫—É—Ä—Å–æ–≤.' },
        ].map((f, i) => (
          <details key={i} className="glass rounded-[14px] p-3">
            <summary className="cursor-pointer font-semibold text-[15px] leading-tight">{f.q}</summary>
            <p className="mt-2 text-[13px] sm:text-sm text-[var(--muted)] leading-snug">{f.a}</p>
          </details>
        ))}
      </div>

      <p className="mt-6 pb-24 text-center text-xs text-[var(--muted)]">@your_bot</p>
    </main>
  );
}
